{"ast":null,"code":"import { nextTick, openBlock, createBlock, createVNode, withKeys, withModifiers, renderSlot, createCommentVNode, withDirectives, Fragment, renderList, toDisplayString, vShow } from 'vue';\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a'],\n  BASIC_TYPES: ['hour', 'minute', 'second', 'apm']\n};\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false,\n  advancedKeyboard: false,\n  hideDropdown: false,\n  blurDelay: 300,\n  manualInputTimeout: 1000,\n  dropOffsetHeight: 160\n};\nvar script = {\n  name: 'VueTimepicker',\n  props: {\n    modelValue: {\n      type: [Object, String]\n    },\n    format: {\n      type: String\n    },\n    minuteInterval: {\n      type: [Number, String]\n    },\n    secondInterval: {\n      type: [Number, String]\n    },\n    hourRange: {\n      type: Array\n    },\n    minuteRange: {\n      type: Array\n    },\n    secondRange: {\n      type: Array\n    },\n    hideDisabledHours: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledMinutes: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledSeconds: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledItems: {\n      type: Boolean,\n      default: false\n    },\n    hideClearButton: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    closeOnComplete: {\n      type: Boolean,\n      default: false\n    },\n    id: {\n      type: String\n    },\n    name: {\n      type: String\n    },\n    inputClass: {\n      type: [String, Object, Array]\n    },\n    placeholder: {\n      type: String\n    },\n    tabindex: {\n      type: [Number, String],\n      default: 0\n    },\n    inputWidth: {\n      type: String\n    },\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    hourLabel: {\n      type: String\n    },\n    minuteLabel: {\n      type: String\n    },\n    secondLabel: {\n      type: String\n    },\n    apmLabel: {\n      type: String\n    },\n    amText: {\n      type: String\n    },\n    pmText: {\n      type: String\n    },\n    blurDelay: {\n      type: [Number, String]\n    },\n    advancedKeyboard: {\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    autoScroll: {\n      type: Boolean,\n      default: false\n    },\n    dropDirection: {\n      type: String,\n      default: 'down'\n    },\n    dropOffsetHeight: {\n      type: [Number, String]\n    },\n    containerId: {\n      type: String\n    },\n    manualInput: {\n      type: Boolean,\n      default: false\n    },\n    manualInputTimeout: {\n      type: [Number, String]\n    },\n    hideDropdown: {\n      type: Boolean,\n      default: false\n    },\n    fixedDropdownButton: {\n      type: Boolean,\n      default: false\n    },\n    debugMode: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      timeValue: {},\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n      isActive: false,\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined,\n      doClearApmChecking: false,\n      selectionTimer: undefined,\n      kbInputTimer: undefined,\n      kbInputLog: '',\n      bakCurrentPos: undefined,\n      forceDropOnTop: false\n    };\n  },\n\n  emits: ['update:modelValue', 'change', 'open', 'close', 'focus', 'blur', 'error'],\n  computed: {\n    opts() {\n      const options = Object.assign({}, DEFAULT_OPTIONS);\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format);\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval;\n      } // minuteInterval failsafe\n\n\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (this.debugMode) {\n          if (options.minuteInterval > 60) {\n            this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`);\n          } else if (options.minuteInterval === 0 || options.minuteInterval < 1) {\n            this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`);\n          }\n        }\n\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60;\n        } else {\n          options.minuteInterval = 1;\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval;\n      } // secondInterval failsafe\n\n\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (this.debugMode) {\n          if (options.secondInterval > 60) {\n            this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`);\n          } else if (options.secondInterval === 0 || options.secondInterval < 1) {\n            this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`);\n          }\n        }\n\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60;\n        } else {\n          options.secondInterval = 1;\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange));\n\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange));\n\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange));\n\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true;\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true;\n      }\n\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true;\n      }\n\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true;\n      }\n\n      if (this.hideDropdown) {\n        if (this.manualInput) {\n          options.hideDropdown = true;\n        } else if (this.debugMode) {\n          this.debugLog('\"hide-dropdown\" only works with \"manual-input\" mode');\n        }\n      }\n\n      if (this.blurDelay && +this.blurDelay > 0) {\n        options.blurDelay = +this.blurDelay;\n      }\n\n      if (this.manualInputTimeout && +this.manualInputTimeout > 0) {\n        options.manualInputTimeout = +this.manualInputTimeout;\n      }\n\n      if (this.dropOffsetHeight && +this.dropOffsetHeight > 0) {\n        options.dropOffsetHeight = +this.dropOffsetHeight;\n      }\n\n      return options;\n    },\n\n    useStringValue() {\n      return typeof this.modelValue === 'string';\n    },\n\n    formatString() {\n      return this.opts.format || DEFAULT_OPTIONS.format;\n    },\n\n    inUse() {\n      const typesInUse = CONFIG.BASIC_TYPES.filter(type => this.getTokenByType(type)); // Sort types and tokens by their sequence in the \"format\" string\n\n      typesInUse.sort((l, r) => {\n        return this.formatString.indexOf(this.getTokenByType(l) || null) - this.formatString.indexOf(this.getTokenByType(r) || null);\n      });\n      const tokensInUse = typesInUse.map(type => this.getTokenByType(type));\n      return {\n        hour: !!this.hourType,\n        minute: !!this.minuteType,\n        second: !!this.secondType,\n        apm: !!this.apmType,\n        types: typesInUse || [],\n        tokens: tokensInUse || []\n      };\n    },\n\n    displayTime() {\n      let formatString = String(this.formatString);\n\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour);\n      }\n\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute);\n      }\n\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second);\n      }\n\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm);\n      }\n\n      return formatString;\n    },\n\n    customDisplayTime() {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime;\n      }\n\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm));\n    },\n\n    inputIsEmpty() {\n      return this.formatString === this.displayTime;\n    },\n\n    allValueSelected() {\n      if (this.inUse.hour && !this.hour || this.inUse.minute && !this.minute || this.inUse.second && !this.second || this.inUse.apm && !this.apm) {\n        return false;\n      }\n\n      return true;\n    },\n\n    columnsSequence() {\n      return this.inUse.types.map(type => type) || [];\n    },\n\n    showClearBtn() {\n      if (this.hideClearButton || this.disabled) {\n        return false;\n      }\n\n      return !this.inputIsEmpty;\n    },\n\n    showDropdownBtn() {\n      if (this.fixedDropdownButton) {\n        return true;\n      }\n\n      if (this.opts.hideDropdown && this.isActive && !this.showDropdown) {\n        return true;\n      }\n\n      return false;\n    },\n\n    baseOn12Hours() {\n      return this.hourType === 'h' || this.hourType === 'hh';\n    },\n\n    hourRangeIn24HrFormat() {\n      if (!this.hourType || !this.opts.hourRange) {\n        return false;\n      }\n\n      if (!this.opts.hourRange.length) {\n        return [];\n      }\n\n      const range = [];\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`);\n          }\n\n          let start = value[0];\n          let end = value[1] || value[0];\n\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start);\n          }\n\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end);\n          }\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) {\n              continue;\n            }\n\n            if (!range.includes(i)) {\n              range.push(i);\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value);\n          } else {\n            value = +value;\n          }\n\n          if (value < 0 || value > 24) {\n            return;\n          }\n\n          if (!range.includes(value)) {\n            range.push(value);\n          }\n        }\n      });\n      range.sort((l, r) => {\n        return l - r;\n      });\n      return range;\n    },\n\n    restrictedHourRange() {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) {\n        return false;\n      } // 12-Hour\n\n\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map(value => {\n          if (value === 12) {\n            return '12p';\n          } else if (value === 24 || value === 0) {\n            return '12a';\n          }\n\n          return value > 12 ? `${value % 12}p` : `${value}a`;\n        });\n        return range;\n      } // 24-Hour\n\n\n      return this.hourRangeIn24HrFormat;\n    },\n\n    validHoursList() {\n      if (!this.manualInput) {\n        return false;\n      }\n\n      if (this.restrictedHourRange) {\n        let list = [];\n\n        if (this.baseOn12Hours) {\n          list = this.restrictedHourRange.map(hr => {\n            const l = hr.substr(0, hr.length - 1);\n            const r = hr.substr(-1);\n            return `${this.formatValue(this.hourType, l)}${r}`;\n          });\n          const am12Index = list.indexOf('12a');\n\n          if (am12Index > 0) {\n            // Make '12a' the first item in h/hh\n            list.unshift(list.splice(am12Index, 1)[0]);\n          }\n\n          return list;\n        }\n\n        list = this.restrictedHourRange.map(hr => {\n          return this.formatValue(this.hourType, hr);\n        });\n\n        if (list.length > 1 && list[0] && list[0] === '24') {\n          // Make '24' the last item in k/kk\n          list.push(list.shift());\n        }\n\n        return list;\n      }\n\n      if (this.baseOn12Hours) {\n        return [].concat([], this.hours.map(hr => `${hr}a`), this.hours.map(hr => `${hr}p`));\n      }\n\n      return this.hours;\n    },\n\n    has() {\n      const result = {\n        customApmText: false\n      };\n      const apmEnabled = !!this.apmType;\n\n      if (apmEnabled && this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat);\n        result.am = range.some(value => value < 12 || value === 24);\n        result.pm = range.some(value => value >= 12 && value < 24);\n      } else {\n        result.am = apmEnabled;\n        result.pm = apmEnabled;\n      }\n\n      if (this.amText && this.amText.length || this.pmText && this.pmText.length) {\n        result.customApmText = true;\n      }\n\n      return result;\n    },\n\n    minuteRangeList() {\n      if (!this.minuteType || !this.opts.minuteRange) {\n        return false;\n      }\n\n      if (!this.opts.minuteRange.length) {\n        return [];\n      }\n\n      return this.renderRangeList(this.opts.minuteRange, 'minute');\n    },\n\n    secondRangeList() {\n      if (!this.secondType || !this.opts.secondRange) {\n        return false;\n      }\n\n      if (!this.opts.secondRange.length) {\n        return [];\n      }\n\n      return this.renderRangeList(this.opts.secondRange, 'second');\n    },\n\n    hourLabelText() {\n      return this.hourLabel || this.hourType;\n    },\n\n    minuteLabelText() {\n      return this.minuteLabel || this.minuteType;\n    },\n\n    secondLabelText() {\n      return this.secondLabel || this.secondType;\n    },\n\n    apmLabelText() {\n      return this.apmLabel || this.apmType;\n    },\n\n    inputWidthStyle() {\n      if (!this.inputWidth || !this.inputWidth.length) {\n        return;\n      }\n\n      return {\n        width: this.inputWidth\n      };\n    },\n\n    tokenRegexBase() {\n      return this.inUse.tokens.join('|');\n    },\n\n    tokenChunks() {\n      if (!this.manualInput && !this.useStringValue) {\n        return false;\n      }\n\n      const formatString = String(this.formatString);\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`;\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr);\n      const tokenChunks = [];\n\n      for (let tkMatch of tokensMatchAll) {\n        const rawToken = tkMatch[0];\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: rawToken,\n          type: this.getTokenType(rawToken),\n          needsCalibrate: rawToken.length < 2,\n          len: (rawToken || '').length\n        };\n        tokenChunks.push(tokenMatchItem);\n      }\n\n      return tokenChunks;\n    },\n\n    needsPosCalibrate() {\n      if (!this.manualInput) {\n        return false;\n      }\n\n      return this.tokenChunks.some(chk => chk.needsCalibrate);\n    },\n\n    tokenChunksPos() {\n      if (!this.manualInput) {\n        return false;\n      }\n\n      if (!this.needsPosCalibrate) {\n        return this.tokenChunks.map(chk => {\n          return {\n            token: chk.token,\n            type: chk.type,\n            start: chk.index,\n            end: chk.index + chk.len\n          };\n        });\n      }\n\n      const list = [];\n      let calibrateLen = 0;\n      this.tokenChunks.forEach(chk => {\n        let chunkCurrentLen; // Adjust for customized AM/PM text\n\n        if (chk.type === 'apm' && this.has.customApmText) {\n          if (this.apm && this.apm.length) {\n            const customApmText = this.apm.toLowerCase() === 'am' ? this.amText : this.pmText;\n            chunkCurrentLen = customApmText && customApmText.length ? customApmText.length : chk.len;\n          } else {\n            chunkCurrentLen = chk.len;\n          } // Others\n\n        } else {\n          chunkCurrentLen = this[chk.type] && this[chk.type].length ? this[chk.type].length : chk.len;\n        }\n\n        list.push({\n          token: chk.token,\n          type: chk.type,\n          start: chk.index + calibrateLen,\n          end: chk.index + calibrateLen + chunkCurrentLen\n        });\n\n        if (chk.needsCalibrate && chunkCurrentLen > chk.len) {\n          calibrateLen += chunkCurrentLen - chk.len;\n        }\n      });\n      return list;\n    },\n\n    invalidValues() {\n      if (this.inputIsEmpty) {\n        return [];\n      }\n\n      if (!this.restrictedHourRange && !this.minuteRangeList && !this.secondRangeList && this.opts.minuteInterval === 1 && this.opts.secondInterval === 1) {\n        return [];\n      }\n\n      const result = [];\n\n      if (this.inUse.hour && !this.isEmptyValue(this.hourType, this.hour) && (!this.isValidValue(this.hourType, this.hour) || this.isDisabled('hour', this.hour))) {\n        result.push('hour');\n      }\n\n      if (this.inUse.minute && !this.isEmptyValue(this.minuteType, this.minute) && (!this.isValidValue(this.minuteType, this.minute) || this.isDisabled('minute', this.minute) || this.notInInterval('minute', this.minute))) {\n        result.push('minute');\n      }\n\n      if (this.inUse.second && !this.isEmptyValue(this.secondType, this.second) && (!this.isValidValue(this.secondType, this.second) || this.isDisabled('second', this.second) || this.notInInterval('second', this.second))) {\n        result.push('second');\n      }\n\n      if (this.inUse.apm && !this.isEmptyValue(this.apmType, this.apm) && (!this.isValidValue(this.apmType, this.apm) || this.isDisabled('apm', this.apm))) {\n        result.push('apm');\n      }\n\n      if (result.length) {\n        return result;\n      }\n\n      return [];\n    },\n\n    hasInvalidInput() {\n      return Boolean(this.invalidValues && this.invalidValues.length);\n    },\n\n    autoDirectionEnabled() {\n      return this.dropDirection === 'auto';\n    },\n\n    dropdownDirClass() {\n      if (this.autoDirectionEnabled) {\n        return this.forceDropOnTop ? 'drop-up' : 'drop-down';\n      }\n\n      return this.dropDirection === 'up' ? 'drop-up' : 'drop-down';\n    }\n\n  },\n  watch: {\n    'opts.format'(newValue) {\n      this.renderFormat(newValue);\n    },\n\n    'opts.minuteInterval'(newInteval) {\n      this.renderList('minute', newInteval);\n    },\n\n    'opts.secondInterval'(newInteval) {\n      this.renderList('second', newInteval);\n    },\n\n    value: {\n      deep: true,\n\n      handler() {\n        this.readValues();\n      }\n\n    },\n\n    displayTime() {\n      this.fillValues();\n    },\n\n    disabled(toDisabled) {\n      if (toDisabled) {\n        // Force close dropdown and reset status when disabled\n        if (this.isActive) {\n          this.isActive = false;\n        }\n\n        if (this.showDropdown) {\n          this.showDropdown = false;\n        }\n      }\n    },\n\n    'invalidValues.length'(newLength, oldLength) {\n      if (newLength && newLength >= 1) {\n        this.$emit('error', this.invalidValues);\n      } else if (oldLength && oldLength >= 1) {\n        this.$emit('error', []);\n      }\n    }\n\n  },\n  methods: {\n    formatValue(token, i) {\n      if (!this.isNumber(i)) {\n        return '';\n      }\n\n      i = +i;\n\n      switch (token) {\n        case 'H':\n        case 'h':\n        case 'k':\n        case 'm':\n        case 's':\n          if (['h', 'k'].includes(token) && i === 0) {\n            return token === 'k' ? '24' : '12';\n          }\n\n          return String(i);\n\n        case 'HH':\n        case 'mm':\n        case 'ss':\n        case 'hh':\n        case 'kk':\n          if (['hh', 'kk'].includes(token) && i === 0) {\n            return token === 'kk' ? '24' : '12';\n          }\n\n          return i < 10 ? `0${i}` : String(i);\n\n        default:\n          return '';\n      }\n    },\n\n    checkAcceptingType(validValues, formatString) {\n      if (!validValues || !formatString || !formatString.length) {\n        return '';\n      }\n\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i];\n        }\n      }\n\n      return '';\n    },\n\n    renderFormat(newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format;\n      let hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat);\n      let minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat);\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat);\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat); // Failsafe checking\n\n      if (!hourType && !minuteType && !this.secondType && !this.apmType) {\n        if (this.debugMode && this.format) {\n          this.debugLog(`No valid tokens found in your defined \"format\" string \"${this.format}\". Fallback to the default \"HH:mm\" format.`);\n        }\n\n        hourType = 'HH';\n        minuteType = 'mm';\n      }\n\n      this.hourType = hourType;\n      this.minuteType = minuteType;\n      this.hourType ? this.renderHoursList() : this.hours = [];\n      this.minuteType ? this.renderList('minute') : this.minutes = [];\n      this.secondType ? this.renderList('second') : this.seconds = [];\n      this.apmType ? this.renderApmList() : this.apms = [];\n      nextTick(() => {\n        this.readValues();\n      });\n    },\n\n    renderHoursList() {\n      const hoursCount = this.baseOn12Hours ? 12 : 24;\n      const hours = [];\n\n      for (let i = 0; i < hoursCount; i++) {\n        if (this.hourType === 'k' || this.hourType === 'kk') {\n          hours.push(this.formatValue(this.hourType, i + 1));\n        } else {\n          hours.push(this.formatValue(this.hourType, i));\n        }\n      }\n\n      this.hours = hours;\n    },\n\n    renderList(listType, interval) {\n      if (!this.isMinuteOrSecond(listType)) {\n        return;\n      }\n\n      const isMinute = listType === 'minute';\n      interval = interval || (isMinute ? this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval : this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval);\n      const result = [];\n\n      for (let i = 0; i < 60; i += interval) {\n        result.push(this.formatValue(isMinute ? this.minuteType : this.secondType, i));\n      }\n\n      isMinute ? this.minutes = result : this.seconds = result;\n    },\n\n    renderApmList() {\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm'];\n    },\n\n    readValues() {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.modelValue}\"`);\n        }\n\n        this.readStringValues(this.modelValue);\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.modelValue || {})}\"`);\n        }\n\n        this.readObjectValues(this.modelValue);\n      }\n    },\n\n    readObjectValues(objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}));\n      const values = Object.keys(timeValue); // Failsafe for empty `v-model` object\n\n      if (values.length === 0) {\n        this.addFallbackValues();\n        return;\n      }\n\n      CONFIG.BASIC_TYPES.forEach(type => {\n        const token = this.getTokenByType(type);\n\n        if (values.indexOf(token) > -1) {\n          const sanitizedValue = this.sanitizedValue(token, timeValue[token]);\n          this[type] = sanitizedValue;\n          timeValue[token] = sanitizedValue;\n        } else {\n          this[type] = '';\n        }\n      });\n      this.timeValue = timeValue;\n    },\n\n    getMatchAllByRegex(testString, regexString) {\n      const str = 'polyfillTest';\n      const needsPolyfill = Boolean(!str.matchAll || typeof str.matchAll !== 'function');\n      return needsPolyfill ? this.polyfillMatchAll(testString, regexString) : testString.matchAll(new RegExp(regexString, 'g'));\n    },\n\n    readStringValues(stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues();\n        return;\n      }\n\n      const formatString = String(this.formatString);\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`;\n      const othersRegxStr = `[^(${this.tokenRegexBase})]+`;\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr);\n      const othersMatchAll = this.getMatchAllByRegex(formatString, othersRegxStr);\n      const chunks = [];\n      const tokenChunks = [];\n\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        };\n        chunks.push(tokenMatchItem);\n        tokenChunks.push(tokenMatchItem);\n      }\n\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        });\n      }\n\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1);\n      let regexCombo = '';\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || '';\n          regexCombo += tokenRegex;\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1');\n          regexCombo += `(?:${safeChars})`;\n        }\n      });\n      const comboReg = new RegExp(regexCombo); // Do test before match\n\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo));\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1);\n        const timeValue = {};\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const targetToken = tokenChunks[vrIndex].token;\n            timeValue[targetToken] = this.setValueFromString(value, targetToken);\n          }\n        });\n        this.timeValue = timeValue;\n\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token);\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`);\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${stringValue}`);\n        }\n      }\n    },\n\n    polyfillMatchAll(targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'));\n      const result = [];\n      const indicesReg = [];\n\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem);\n          let index;\n\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index;\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g');\n            index = itemIndicesRegex.exec(targetString).index;\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            });\n          }\n\n          result.push({\n            0: String(matchedItem),\n            index: index\n          });\n        });\n      }\n\n      return result;\n    },\n\n    addFallbackValues() {\n      const timeValue = {};\n      this.inUse.types.forEach(type => {\n        timeValue[this.getTokenByType(type)] = '';\n      });\n      this.timeValue = timeValue;\n    },\n\n    setValueFromString(parsedValue, token) {\n      if (!token || !parsedValue) {\n        return '';\n      }\n\n      const tokenType = this.getTokenType(token);\n\n      if (!tokenType || !tokenType.length) {\n        return '';\n      }\n\n      const stdValue = parsedValue !== this.getTokenByType(tokenType) ? parsedValue : '';\n      this[tokenType] = stdValue;\n      return stdValue;\n    },\n\n    fillValues(forceEmit) {\n      const fullValues = {};\n      const baseHour = this.hour;\n      const baseHourType = this.hourType;\n      let apmValue; // Hour type or hour value is NOT set in the \"format\" string\n\n      if (!baseHourType || !this.isNumber(baseHour)) {\n        CONFIG.HOUR_TOKENS.forEach(token => fullValues[token] = '');\n        apmValue = this.lowerCasedApm(this.apm || '');\n        fullValues.a = apmValue;\n        fullValues.A = apmValue.toUpperCase(); // Both Hour type and value are set\n      } else {\n        const hourValue = +baseHour;\n        const apmValue = this.baseOn12Hours && this.apm ? this.lowerCasedApm(this.apm) : false;\n        CONFIG.HOUR_TOKENS.forEach(token => {\n          if (token === baseHourType) {\n            fullValues[token] = baseHour;\n            return;\n          }\n\n          let value;\n          let apm;\n\n          switch (token) {\n            case 'H':\n            case 'HH':\n            case 'k':\n            case 'kk':\n              if (this.baseOn12Hours) {\n                if (apmValue === 'pm') {\n                  value = hourValue < 12 ? hourValue + 12 : hourValue;\n                } else if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 12 ? 24 : hourValue;\n                } else {\n                  value = hourValue % 12;\n                }\n              } else {\n                if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 0 ? 24 : hourValue;\n                } else {\n                  value = hourValue % 24;\n                }\n              }\n\n              fullValues[token] = this.formatValue(token, value);\n              break;\n\n            case 'h':\n            case 'hh':\n              // h <-> hh\n              if (this.baseOn12Hours) {\n                value = hourValue;\n                apm = apmValue || ''; // Read from other hour formats\n              } else {\n                if (hourValue > 11 && hourValue < 24) {\n                  apm = 'pm';\n                  value = hourValue === 12 ? 12 : hourValue % 12;\n                } else {\n                  apm = 'am';\n                  value = hourValue % 12 === 0 ? 12 : hourValue;\n                }\n              }\n\n              fullValues[token] = this.formatValue(token, value);\n              fullValues.a = apm;\n              fullValues.A = apm.toUpperCase();\n              break;\n          }\n        });\n      }\n\n      fullValues.m = this.formatValue('m', this.minute);\n      fullValues.mm = this.formatValue('mm', this.minute);\n      fullValues.s = this.formatValue('s', this.second);\n      fullValues.ss = this.formatValue('ss', this.second);\n      this.fullValues = fullValues; // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue();\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleActive();\n      }\n    },\n\n    emitTimeValue() {\n      if (!this.fullValues) {\n        return;\n      }\n\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.');\n        }\n\n        return;\n      }\n\n      const fullValues = JSON.parse(JSON.stringify(this.fullValues));\n\n      if (this.useStringValue) {\n        this.$emit('update:modelValue', this.inputIsEmpty ? '' : String(this.displayTime));\n      } else {\n        const tokensInUse = this.inUse.tokens || [];\n        const timeValue = {};\n        tokensInUse.forEach(token => {\n          timeValue[token] = fullValues[token] || '';\n        });\n        this.$emit('update:modelValue', JSON.parse(JSON.stringify(timeValue)));\n      }\n\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      });\n    },\n\n    translate12hRange(value) {\n      const valueT = this.match12hRange(value);\n\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12);\n      }\n\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0);\n    },\n\n    isDisabled(type, value) {\n      if (!this.isBasicType(type) || !this.inUse[type]) {\n        return true;\n      }\n\n      switch (type) {\n        case 'hour':\n          return this.isDisabledHour(value);\n\n        case 'minute':\n        case 'second':\n          if (!this[`${type}RangeList`]) {\n            return false;\n          }\n\n          return !this[`${type}RangeList`].includes(value);\n\n        case 'apm':\n          if (!this.restrictedHourRange) {\n            return false;\n          }\n\n          return !this.has[this.lowerCasedApm(value)];\n\n        default:\n          return true;\n      }\n    },\n\n    isDisabledHour(value) {\n      if (!this.restrictedHourRange) {\n        return false;\n      }\n\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false;\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p';\n          return !this.restrictedHourRange.includes(`${+value}${token}`);\n        }\n      } // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n\n\n      if ((this.hourType === 'HH' || this.hourType === 'H') && +value === 0 && this.restrictedHourRange.includes(24)) {\n        return false;\n      }\n\n      return !this.restrictedHourRange.includes(+value);\n    },\n\n    notInInterval(section, value) {\n      if (!section || !this.isMinuteOrSecond(section)) {\n        return;\n      }\n\n      if (this.opts[`${section}Interval`] === 1) {\n        return false;\n      }\n\n      return +value % this.opts[`${section}Interval`] !== 0;\n    },\n\n    renderRangeList(rawRange, section) {\n      if (!rawRange || !section || !this.isMinuteOrSecond(section)) {\n        return [];\n      }\n\n      const range = [];\n      let formatedValue;\n      rawRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"${section}-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`);\n          }\n\n          const start = value[0];\n          const end = value[1] || value[0];\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) {\n              continue;\n            }\n\n            formatedValue = this.formatValue(this.getTokenByType(section), i);\n\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue);\n            }\n          }\n        } else {\n          if (+value < 0 || +value > 59) {\n            return;\n          }\n\n          formatedValue = this.formatValue(this.getTokenByType(section), value);\n\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue);\n          }\n        }\n      });\n      range.sort((l, r) => {\n        return l - r;\n      }); // Debug Mode\n\n      if (this.debugMode) {\n        const fullList = (section === 'minute' ? this.minutes : this.seconds) || [];\n        const validItems = fullList.filter(item => range.includes(item));\n\n        if (!validItems || !validItems.length) {\n          if (section === 'minute') {\n            this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`);\n          } else {\n            this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`);\n          }\n        }\n      }\n\n      return range;\n    },\n\n    forceApmSelection() {\n      if (this.manualInput) {\n        // Skip this to allow users to paste a string value from the clipboard in Manual Input mode\n        return;\n      }\n\n      if (this.apmType && !this.apm) {\n        if (this.has.am || this.has.pm) {\n          this.doClearApmChecking = true;\n          const apmValue = this.has.am ? 'am' : 'pm';\n          this.apm = this.apmType === 'A' ? apmValue.toUpperCase() : apmValue;\n        }\n      }\n    },\n\n    emptyApmSelection() {\n      if (this.doClearApmChecking && this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = '';\n      }\n\n      this.doClearApmChecking = false;\n    },\n\n    apmDisplayText(apmValue) {\n      if (this.amText && this.lowerCasedApm(apmValue) === 'am') {\n        return this.amText;\n      }\n\n      if (this.pmText && this.lowerCasedApm(apmValue) === 'pm') {\n        return this.pmText;\n      }\n\n      return apmValue;\n    },\n\n    toggleActive() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.isActive = !this.isActive;\n\n      if (this.isActive) {\n        this.isFocusing = true;\n\n        if (this.manualInput) {\n          this.$emit('focus');\n        }\n\n        if (!this.opts.hideDropdown) {\n          this.setDropdownState(true);\n        } // Record to check if value did change in the later phase\n\n\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '');\n        }\n\n        if (this.manualInput && !this.inputIsEmpty) {\n          nextTick(() => {\n            if (this.$refs.input && this.$refs.input.selectionStart === 0 && this.$refs.input.selectionEnd === this.displayTime.length) {\n              // Select the first slot instead of the whole value string when tabbed in\n              this.selectFirstSlot();\n            }\n          });\n        }\n      } else {\n        if (this.showDropdown) {\n          this.setDropdownState(false);\n        } else if (this.manualInput) {\n          this.$emit('blur');\n        }\n\n        this.isFocusing = false;\n\n        if (this.lazy) {\n          this.fillValues(true);\n          this.bakDisplayTime = undefined;\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        this.showDropdown ? this.forceApmSelection() : this.emptyApmSelection();\n      }\n\n      if (this.showDropdown) {\n        this.checkForAutoScroll();\n      }\n    },\n\n    setDropdownState(toShow, fromUserClick = false) {\n      if (toShow) {\n        this.keepFocusing();\n\n        if (this.autoDirectionEnabled) {\n          this.checkDropDirection();\n        }\n\n        this.showDropdown = true;\n        this.$emit('open');\n\n        if (fromUserClick) {\n          if (this.fixedDropdownButton) {\n            this.isActive = true;\n          }\n\n          this.$emit('blur');\n          this.checkForAutoScroll();\n        }\n      } else {\n        this.showDropdown = false;\n        this.$emit('close');\n      }\n    },\n\n    blurEvent() {\n      if (this.manualInput && !this.opts.hideDropdown) {\n        // hideDropdown's `blur` event is handled somewhere else\n        this.$emit('blur');\n      }\n    },\n\n    select(type, value) {\n      if (this.isBasicType(type) && !this.isDisabled(type, value)) {\n        this[type] = value;\n\n        if (this.doClearApmChecking) {\n          this.doClearApmChecking = false;\n        }\n      }\n    },\n\n    clearTime() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.hour = '';\n      this.minute = '';\n      this.second = '';\n      this.apm = '';\n\n      if (this.manualInput && this.$refs && this.$refs.input && this.$refs.input.value.length) {\n        this.$refs.input.value = '';\n      }\n\n      if (this.lazy) {\n        this.fillValues(true);\n      }\n    },\n\n    //\n    // Auto-Scroll\n    //\n    checkForAutoScroll() {\n      if (this.inputIsEmpty) {\n        return;\n      }\n\n      if (this.autoScroll) {\n        nextTick(() => {\n          this.scrollToSelectedValues();\n        });\n      } else if (this.advancedKeyboard) {\n        // Auto-focus on selected value in the first column for advanced-keyboard\n        nextTick(() => {\n          const firstColumn = this.inUse.types[0];\n          this.scrollToSelected(firstColumn, true);\n        });\n      }\n    },\n\n    scrollToSelected(column, allowFallback = false) {\n      if (!this.timeValue || this.inputIsEmpty) {\n        return;\n      }\n\n      const targetList = this.$el.querySelectorAll(`ul.${column}s`)[0];\n      let targetValue = this.activeItemInCol(column)[0];\n\n      if (!targetValue && allowFallback) {\n        // No value selected in the target column, fallback to the first found valid item\n        targetValue = this.validItemsInCol(column)[0];\n      }\n\n      if (targetList && targetValue) {\n        targetList.scrollTop = targetValue.offsetTop || 0;\n\n        if (this.advancedKeyboard) {\n          targetValue.focus();\n        }\n      }\n    },\n\n    scrollToSelectedValues() {\n      if (!this.timeValue || this.inputIsEmpty) {\n        return;\n      }\n\n      this.inUse.types.forEach(section => {\n        this.scrollToSelected(section);\n      });\n    },\n\n    //\n    // Additional Keyboard Navigation\n    //\n    onFocus() {\n      if (this.disabled) {\n        return;\n      }\n\n      if (!this.isFocusing) {\n        this.isFocusing = true;\n      }\n\n      if (!this.isActive) {\n        this.toggleActive();\n      }\n    },\n\n    escBlur() {\n      if (this.disabled) {\n        return;\n      }\n\n      window.clearTimeout(this.debounceTimer);\n      this.isFocusing = false;\n      const inputBox = this.$el.querySelectorAll('input.vue__time-picker-input')[0];\n\n      if (inputBox) {\n        inputBox.blur();\n      }\n    },\n\n    debounceBlur() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.isFocusing = false;\n      window.clearTimeout(this.debounceTimer);\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer);\n        this.onBlur();\n      }, this.opts.blurDelay);\n    },\n\n    onBlur() {\n      if (!this.disabled && !this.isFocusing && this.isActive) {\n        this.toggleActive();\n      }\n    },\n\n    keepFocusing() {\n      if (this.disabled) {\n        return;\n      }\n\n      window.clearTimeout(this.debounceTimer);\n\n      if (!this.isFocusing) {\n        this.isFocusing = true;\n      }\n    },\n\n    validItemsInCol(column) {\n      const columnClass = `${column}s`;\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`);\n    },\n\n    activeItemInCol(column) {\n      const columnClass = `${column}s`;\n      return this.$el.querySelectorAll(`ul.${columnClass} > li.active:not(.hint)`);\n    },\n\n    getClosestSibling(column, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(column);\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, sbl => {\n        return sbl.getAttribute('data-key') === dataKey;\n      }); // Already the first item\n\n      if (getPrevious && selfIndex === 0) {\n        return siblingsInCol[siblingsInCol.length - 1];\n      } // Already the last item\n\n\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        return siblingsInCol[0];\n      } // Selected value not in the valid values list\n\n\n      if (selfIndex < 0) {\n        return siblingsInCol[0];\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1];\n      }\n\n      return siblingsInCol[selfIndex + 1];\n    },\n\n    prevItem(column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, true);\n\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus();\n      }\n    },\n\n    nextItem(column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, false);\n\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus();\n      }\n    },\n\n    getSideColumnName(currentColumn, toLeft = false) {\n      const currentColumnIndex = this.inUse.types.indexOf(currentColumn);\n\n      if (toLeft && currentColumnIndex <= 0) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already');\n        }\n\n        return;\n      } else if (!toLeft && currentColumnIndex === this.inUse.types.length - 1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already');\n        }\n\n        return;\n      }\n\n      return this.inUse.types[toLeft ? currentColumnIndex - 1 : currentColumnIndex + 1];\n    },\n\n    getFirstItemInSideColumn(currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft);\n\n      if (!targetColumn) {\n        return;\n      }\n\n      const listItems = this.validItemsInCol(targetColumn);\n\n      if (listItems && listItems[0]) {\n        return listItems[0];\n      }\n    },\n\n    getActiveItemInSideColumn(currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft);\n\n      if (!targetColumn) {\n        return;\n      }\n\n      const activeItems = this.activeItemInCol(targetColumn);\n\n      if (activeItems && activeItems[0]) {\n        return activeItems[0];\n      }\n    },\n\n    toLeftColumn(currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, true) || this.getFirstItemInSideColumn(currentColumn, true);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n\n    toRightColumn(currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, false) || this.getFirstItemInSideColumn(currentColumn, false);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n\n    //\n    // Manual Input\n    //\n    onMouseDown() {\n      if (!this.manualInput) {\n        return;\n      }\n\n      window.clearTimeout(this.selectionTimer);\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer);\n\n        if (this.$refs && this.$refs.input) {\n          const nearestSlot = this.getNearestChunkByPos(this.$refs.input.selectionStart || 0);\n          this.debounceSetInputSelection(nearestSlot);\n        }\n      }, 50);\n    },\n\n    keyDownHandler(evt) {\n      if (evt.isComposing || evt.keyCode === 229) {\n        // Skip IME inputs\n        evt.preventDefault();\n        evt.stopPropagation();\n        return false;\n      } // Numbers\n\n\n      if (evt.keyCode >= 48 && evt.keyCode <= 57 || evt.keyCode >= 96 && evt.keyCode <= 105) {\n        evt.preventDefault();\n        this.keyboardInput(evt.key); // A|P|M\n      } else if ([65, 80, 77].includes(evt.keyCode)) {\n        evt.preventDefault();\n        this.keyboardInput(evt.key, true); // Arrow keys\n      } else if (evt.keyCode >= 37 && evt.keyCode <= 40) {\n        evt.preventDefault();\n        this.clearKbInputLog();\n        this.arrowHandler(evt); // Delete|Backspace\n      } else if (evt.keyCode === 8 || evt.keyCode === 46) {\n        evt.preventDefault();\n        this.clearKbInputLog();\n        this.clearTime(); // Tab\n      } else if (evt.keyCode === 9) {\n        this.clearKbInputLog();\n        this.tabHandler(evt); // Prevent any Non-ESC and non-pasting inputs\n      } else if (evt.keyCode !== 27 && !(evt.metaKey || evt.ctrlKey)) {\n        evt.preventDefault();\n      }\n    },\n\n    onCompostionStart(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.bakCurrentPos = this.getCurrentTokenChunk();\n      return false;\n    },\n\n    onCompostionEnd(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      const cpsData = evt.data;\n      let inputIsCustomApmText = false;\n\n      if (this.has.customApmText) {\n        inputIsCustomApmText = this.isCustomApmText(cpsData);\n      }\n\n      if (inputIsCustomApmText) {\n        this.setSanitizedValueToSection('apm', inputIsCustomApmText);\n      }\n\n      this.$refs.input.value = this.has.customApmText ? this.customDisplayTime : this.displayTime;\n      nextTick(() => {\n        if (this.bakCurrentPos) {\n          const bakPos = JSON.parse(JSON.stringify(this.bakCurrentPos));\n\n          if (inputIsCustomApmText) {\n            bakPos.end = bakPos.start + cpsData.length;\n          }\n\n          this.debounceSetInputSelection(bakPos);\n          this.bakCurrentPos = null;\n        }\n      });\n      return false;\n    },\n\n    pasteHandler(evt) {\n      evt.preventDefault();\n      let pastingText = (evt.clipboardData || window.clipboardData).getData('text');\n\n      if (this.debugMode) {\n        this.debugLog(`Pasting value \"${pastingText}\" from clipboard`);\n      }\n\n      if (!pastingText || !pastingText.length) {\n        return;\n      } // Replace custom AM/PM text (if any)\n\n\n      if (this.has.customApmText) {\n        pastingText = this.replaceCustomApmText(pastingText);\n      }\n\n      if (this.inputIsEmpty) {\n        this.readStringValues(pastingText);\n      } else {\n        this.kbInputLog = pastingText.substr(-2, 2);\n        this.setKbInput();\n        this.debounceClearKbLog();\n      }\n    },\n\n    arrowHandler(evt) {\n      const direction = {\n        37: 'L',\n        38: 'U',\n        39: 'R',\n        40: 'D'\n      }[evt.keyCode];\n\n      if (direction === 'U' || direction === 'D') {\n        if (this.inputIsEmpty) {\n          this.selectFirstValidValue();\n        } else {\n          const currentChunk = this.getCurrentTokenChunk();\n\n          if (!currentChunk) {\n            this.selectFirstValidValue();\n            return;\n          }\n\n          const tokenType = currentChunk.type;\n          this.getClosestValidItemInCol(tokenType, this[tokenType], direction);\n          const newChunkPos = this.getCurrentTokenChunk();\n          this.debounceSetInputSelection(newChunkPos);\n        }\n      } else if (direction === 'R') {\n        this.toLateralToken(false);\n      } else if (direction === 'L') {\n        this.toLateralToken(true);\n      }\n    },\n\n    tabHandler(evt) {\n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        const currentChunk = this.getCurrentTokenChunk();\n\n        if (!currentChunk) {\n          return;\n        }\n\n        const firstChunk = this.tokenChunksPos[0];\n        const lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1];\n\n        if (evt.shiftKey && currentChunk.token !== firstChunk.token || !evt.shiftKey && currentChunk.token !== lastChunk.token) {\n          evt.preventDefault();\n          this.toLateralToken(evt.shiftKey);\n        }\n      }\n    },\n\n    keyboardInput(newChar, isApm = false) {\n      const currentChunk = this.getCurrentTokenChunk();\n\n      if (!currentChunk || currentChunk.type !== 'apm' && isApm || currentChunk.type === 'apm' && !isApm) {\n        return;\n      }\n\n      this.kbInputLog = `${this.kbInputLog.substr(-1)}${newChar}`;\n      this.setKbInput();\n      this.debounceClearKbLog();\n    },\n\n    clearKbInputLog() {\n      window.clearTimeout(this.kbInputTimer);\n      this.kbInputLog = '';\n    },\n\n    debounceClearKbLog() {\n      window.clearTimeout(this.kbInputTimer);\n      this.kbInputTimer = window.setTimeout(() => {\n        this.clearKbInputLog();\n      }, this.opts.manualInputTimeout);\n    },\n\n    setKbInput(value) {\n      value = value || this.kbInputLog;\n      const currentChunk = this.getCurrentTokenChunk();\n\n      if (!currentChunk || !value || !value.length) {\n        return;\n      }\n\n      const chunkType = currentChunk.type;\n      const chunkToken = currentChunk.token;\n      let validValue;\n\n      if (chunkType === 'apm') {\n        if (this.lowerCasedApm(value).includes('a')) {\n          validValue = 'am';\n        } else if (this.lowerCasedApm(value).includes('p')) {\n          validValue = 'pm';\n        }\n\n        if (validValue) {\n          validValue = chunkToken === 'A' ? validValue.toUpperCase() : validValue;\n        }\n      } else {\n        if (this.isValidValue(chunkToken, value)) {\n          validValue = value;\n        } else {\n          const lastInputValue = this.formatValue(chunkToken, value.substr(-1));\n\n          if (this.isValidValue(chunkToken, lastInputValue)) {\n            validValue = lastInputValue;\n          }\n        }\n      }\n\n      if (validValue) {\n        this.setSanitizedValueToSection(chunkType, validValue);\n        const newChunkPos = this.getCurrentTokenChunk();\n        this.debounceSetInputSelection(newChunkPos);\n      }\n\n      if (this.debugMode) {\n        if (validValue) {\n          this.debugLog(`Successfully set value \"${validValue}\" from latest input \"${value}\" for the \"${chunkType}\" slot`);\n        } else {\n          this.debugLog(`Value \"${value}\" is invalid in the \"${chunkType}\" slot`);\n        }\n      }\n    },\n\n    // Form Autofill\n    onChange() {\n      if (!this.manualInput || !this.$refs || !this.$refs.input) {\n        return;\n      }\n\n      const autoFillValue = this.$refs.input.value || '';\n\n      if (autoFillValue && autoFillValue.length) {\n        this.readStringValues(autoFillValue);\n      }\n    },\n\n    getNearestChunkByPos(startPos) {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) {\n        return;\n      }\n\n      let nearest;\n      let nearestDelta = -1;\n\n      for (let i = 0; i < this.tokenChunksPos.length; i++) {\n        const chunk = JSON.parse(JSON.stringify(this.tokenChunksPos[i]));\n\n        if (chunk.start === startPos) {\n          return chunk;\n        }\n\n        const delta = Math.abs(chunk.start - startPos);\n\n        if (nearestDelta < 0) {\n          nearest = chunk;\n          nearestDelta = delta;\n        } else {\n          if (nearestDelta <= delta) {\n            return nearest;\n          }\n\n          nearestDelta = delta;\n          nearest = chunk;\n        }\n      }\n\n      return nearest;\n    },\n\n    selectFirstValidValue() {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) {\n        return;\n      }\n\n      const firstSlotType = this.tokenChunksPos[0].type;\n\n      if (firstSlotType === 'hour') {\n        this.getClosestHourItem();\n      } else {\n        this.getClosestValidItemInCol(firstSlotType, this[firstSlotType]);\n      }\n\n      this.selectFirstSlot();\n    },\n\n    getClosestHourItem(currentValue, direction = 'U') {\n      if (!this.validHoursList || !this.validHoursList.length) {\n        if (this.debugMode) {\n          this.debugLog(`No valid hour values found, please check your \"hour-range\" config\\nhour-range: ${JSON.stringify(this.hourRange)}`);\n        }\n\n        return;\n      }\n\n      if (!currentValue) {\n        this.setManualHour(this.validHoursList[0]);\n        return;\n      }\n\n      const currentIndex = this.validHoursList.findIndex(item => {\n        if (!this.baseOn12Hours) {\n          return item === currentValue;\n        } else {\n          const valueKey = `${currentValue}${this.lowerCasedApm(this.apm) === 'pm' ? 'p' : 'a'}`;\n          return item === valueKey;\n        }\n      });\n      let nextIndex;\n\n      if (currentIndex === -1) {\n        nextIndex = 0;\n      } else if (direction === 'D') {\n        nextIndex = currentIndex === 0 ? this.validHoursList.length - 1 : currentIndex - 1;\n      } else {\n        nextIndex = (currentIndex + 1) % this.validHoursList.length;\n      }\n\n      const nextItem = this.validHoursList[nextIndex];\n      this.setManualHour(nextItem);\n    },\n\n    getClosestValidItemInCol(column, currentValue, direction = 'U') {\n      if (column === 'hour') {\n        this.getClosestHourItem(currentValue, direction);\n      } else {\n        const nextItem = direction === 'D' ? this.prevItem(column, this[column], true) : this.nextItem(column, this[column], true);\n\n        if (nextItem) {\n          this.select(column, nextItem.getAttribute('data-key'));\n        }\n      }\n    },\n\n    setSanitizedValueToSection(section, inputValue) {\n      if (!section || !this.getTokenByType(section)) {\n        return;\n      } // NOTE: Disabled values are allowed here, followed by an 'error' event, though\n\n\n      const sanitizedValue = this.sanitizedValue(this.getTokenByType(section), inputValue);\n      this[section] = sanitizedValue;\n    },\n\n    setManualHour(nextItem) {\n      if (this.is12hRange(nextItem)) {\n        const hourT = this.match12hRange(nextItem);\n        const apmValue = hourT[2] === 'a' ? 'AM' : 'PM';\n        this.setSanitizedValueToSection('apm', this.apmType === 'a' ? apmValue.toLowerCase() : apmValue);\n        this.setSanitizedValueToSection('hour', hourT[1]);\n      } else {\n        this.setSanitizedValueToSection('hour', nextItem);\n      }\n    },\n\n    debounceSetInputSelection({\n      start = 0,\n      end = 0\n    }) {\n      nextTick(() => {\n        this.setInputSelectionRange(start, end);\n      });\n      window.clearTimeout(this.selectionTimer);\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer); // Double-check selection for 12hr format\n\n        if (this.$refs.input && (this.$refs.input.selectionStart !== start || this.$refs.input.selectionEnd !== end)) {\n          this.setInputSelectionRange(start, end);\n        }\n      }, 30);\n    },\n\n    setInputSelectionRange(start, end) {\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.setSelectionRange(start, end);\n      }\n    },\n\n    getCurrentTokenChunk() {\n      return this.getNearestChunkByPos(this.$refs.input && this.$refs.input.selectionStart || 0);\n    },\n\n    selectFirstSlot() {\n      const firstChunkPos = this.getNearestChunkByPos(0);\n      this.debounceSetInputSelection(firstChunkPos);\n    },\n\n    toLateralToken(toLeft) {\n      const currentChunk = this.getCurrentTokenChunk();\n\n      if (!currentChunk) {\n        this.selectFirstValidValue();\n        return;\n      }\n\n      const currentChunkIndex = this.tokenChunksPos.findIndex(chk => chk.token === currentChunk.token);\n\n      if (!toLeft && currentChunkIndex >= this.tokenChunksPos.length - 1 || toLeft && currentChunkIndex === 0) {\n        if (this.debugMode) {\n          if (toLeft) {\n            this.debugLog('You\\'re in the leftmost slot already');\n          } else {\n            this.debugLog('You\\'re in the rightmost slot already');\n          }\n        }\n\n        return;\n      }\n\n      const targetSlotPos = toLeft ? this.tokenChunksPos[currentChunkIndex - 1] : this.tokenChunksPos[currentChunkIndex + 1];\n      this.debounceSetInputSelection(targetSlotPos);\n    },\n\n    isCustomApmText(inputData) {\n      if (!inputData || !inputData.length) {\n        return false;\n      }\n\n      if (this.amText && this.amText === inputData) {\n        return this.apmType === 'A' ? 'AM' : 'am';\n      }\n\n      if (this.pmText && this.pmText === inputData) {\n        return this.apmType === 'A' ? 'PM' : 'pm';\n      }\n\n      return false;\n    },\n\n    replaceCustomApmText(inputString) {\n      if (this.amText && this.amText.length && inputString.includes(this.amText)) {\n        return inputString.replace(new RegExp(this.amText, 'g'), this.apmType === 'A' ? 'AM' : 'am');\n      } else if (this.pmText && this.pmText.length && inputString.includes(this.pmText)) {\n        return inputString.replace(new RegExp(this.pmText, 'g'), this.apmType === 'A' ? 'PM' : 'pm');\n      }\n\n      return inputString;\n    },\n\n    checkDropDirection() {\n      if (!this.$el) {\n        return;\n      }\n\n      let container;\n\n      if (this.containerId && this.containerId.length) {\n        container = document.getElementById(this.containerId);\n\n        if (!container && this.debugMode) {\n          this.debugLog(`Container with id \"${this.containerId}\" not found. Fallback to document body.`);\n        }\n      }\n\n      const el = this.$el;\n      let spaceDown;\n\n      if (container && container.offsetHeight) {\n        // Valid container found\n        spaceDown = container.offsetTop + container.offsetHeight - (el.offsetTop + el.offsetHeight);\n      } else {\n        // Fallback to document body\n        const docHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);\n        spaceDown = docHeight - (el.offsetTop + el.offsetHeight);\n      }\n\n      this.forceDropOnTop = this.opts.dropOffsetHeight > spaceDown;\n    },\n\n    //\n    // Helpers\n    //\n    is12hRange(value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value);\n    },\n\n    match12hRange(value) {\n      return value.match(/^(\\d{1,2})(a|p|A|P)$/);\n    },\n\n    isNumber(value) {\n      return !isNaN(parseFloat(value)) && isFinite(value);\n    },\n\n    isBasicType(type) {\n      return CONFIG.BASIC_TYPES.includes(type);\n    },\n\n    lowerCasedApm(apmValue) {\n      return (apmValue || '').toLowerCase();\n    },\n\n    getTokenRegex(token) {\n      switch (token) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})';\n\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})';\n\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})';\n\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})';\n\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})';\n\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})';\n\n        case 'mm':\n          return '([0-5][0-9]|m{2})';\n\n        case 'ss':\n          return '([0-5][0-9]|s{2})';\n\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})';\n\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})';\n\n        case 'A':\n          return '(AM|PM|A{1})';\n\n        case 'a':\n          return '(am|pm|a{1})';\n\n        default:\n          return '';\n      }\n    },\n\n    isEmptyValue(targetToken, testValue) {\n      return !testValue || !testValue.length || testValue && testValue === targetToken;\n    },\n\n    isValidValue(targetToken, testValue) {\n      if (!targetToken || this.isEmptyValue(targetToken, testValue)) {\n        return false;\n      }\n\n      const tokenRegexStr = this.getTokenRegex(targetToken);\n\n      if (!tokenRegexStr || !tokenRegexStr.length) {\n        return false;\n      }\n\n      return new RegExp(`^${tokenRegexStr}$`).test(testValue);\n    },\n\n    sanitizedValue(targetToken, inputValue) {\n      if (this.isValidValue(targetToken, inputValue)) {\n        return inputValue;\n      }\n\n      return '';\n    },\n\n    getTokenType(token) {\n      return this.inUse.types[this.inUse.tokens.indexOf(token)] || '';\n    },\n\n    getTokenByType(type) {\n      return this[`${type}Type`] || '';\n    },\n\n    isMinuteOrSecond(type) {\n      return ['minute', 'second'].includes(type);\n    },\n\n    // Breaking attribution coercion changes in Vue 3\n    // > https://v3.vuejs.org/guide/migration/attribute-coercion.html#overview\n    booleanAttr(isTrue = false) {\n      return isTrue ? true : null;\n    },\n\n    debugLog(logText) {\n      if (!logText || !logText.length) {\n        return;\n      }\n\n      let identifier = '';\n\n      if (this.id) {\n        identifier += `#${this.id}`;\n      }\n\n      if (this.name) {\n        identifier += `[name=${this.name}]`;\n      }\n\n      if (this.inputClass) {\n        let inputClasses = [];\n\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g);\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass);\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName);\n            }\n          });\n        }\n\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`;\n          }\n        }\n      }\n\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : ''}`;\n\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText);\n      } else {\n        window.console.log(finalLogText);\n      }\n    }\n\n  },\n\n  mounted() {\n    window.clearTimeout(this.debounceTimer);\n    window.clearTimeout(this.selectionTimer);\n    window.clearTimeout(this.kbInputTimer);\n    this.renderFormat();\n  },\n\n  beforeUnmount() {\n    window.clearTimeout(this.debounceTimer);\n    window.clearTimeout(this.selectionTimer);\n    window.clearTimeout(this.kbInputTimer);\n  }\n\n};\nconst _hoisted_1 = {\n  key: 0,\n  class: \"controls\",\n  tabindex: \"-1\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/createVNode(\"span\", {\n  class: \"char\"\n}, \"×\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/createVNode(\"span\", {\n  class: \"char\"\n}, \"▾\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = {\n  key: 1,\n  class: \"custom-icon\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createBlock(\"span\", {\n    class: \"vue__time-picker\",\n    style: $options.inputWidthStyle\n  }, [createVNode(\"input\", {\n    type: \"text\",\n    class: [\"vue__time-picker-input\", [$props.inputClass, {\n      'is-empty': $options.inputIsEmpty,\n      'invalid': $options.hasInvalidInput,\n      'all-selected': $options.allValueSelected,\n      'disabled': $props.disabled,\n      'has-custom-icon': _ctx.$slots && _ctx.$slots.icon\n    }]],\n    ref: \"input\",\n    style: $options.inputWidthStyle,\n    id: $props.id,\n    name: $props.name,\n    value: $options.inputIsEmpty ? null : $options.customDisplayTime,\n    placeholder: $props.placeholder ? $props.placeholder : $options.formatString,\n    tabindex: $props.disabled ? -1 : $props.tabindex,\n    disabled: $options.booleanAttr($props.disabled),\n    readonly: $options.booleanAttr(!$props.manualInput),\n    autocomplete: $props.autocomplete,\n    onFocus: _cache[1] || (_cache[1] = (...args) => $options.onFocus(...args)),\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.onChange(...args)),\n    onBlur: _cache[3] || (_cache[3] = $event => {\n      $options.debounceBlur();\n      $options.blurEvent();\n    }),\n    onMousedown: _cache[4] || (_cache[4] = (...args) => $options.onMouseDown(...args)),\n    onKeydown: [_cache[5] || (_cache[5] = (...args) => $options.keyDownHandler(...args)), _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => $options.escBlur(...args), [\"exact\"]), [\"esc\"]))],\n    onCompositionstart: _cache[6] || (_cache[6] = (...args) => $options.onCompostionStart(...args)),\n    onCompositionend: _cache[7] || (_cache[7] = (...args) => $options.onCompostionEnd(...args)),\n    onPaste: _cache[8] || (_cache[8] = (...args) => $options.pasteHandler(...args))\n  }, null, 46\n  /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */\n  , [\"id\", \"name\", \"value\", \"placeholder\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\"]), $options.showClearBtn || $options.showDropdownBtn ? (openBlock(), createBlock(\"div\", _hoisted_1, [!$data.isActive && $options.showClearBtn ? (openBlock(), createBlock(\"span\", {\n    key: 0,\n    class: [\"clear-btn\", {\n      'has-custom-btn': _ctx.$slots && _ctx.$slots.clearButton\n    }],\n    tabindex: \"-1\",\n    onClick: _cache[10] || (_cache[10] = (...args) => $options.clearTime(...args))\n  }, [renderSlot(_ctx.$slots, \"clearButton\", {}, () => [_hoisted_2])], 2\n  /* CLASS */\n  )) : createCommentVNode(\"v-if\", true), $options.showDropdownBtn ? (openBlock(), createBlock(\"span\", {\n    key: 1,\n    class: [\"dropdown-btn\", {\n      'has-custom-btn': _ctx.$slots && _ctx.$slots.dropdownButton\n    }],\n    tabindex: \"-1\",\n    onClick: _cache[11] || (_cache[11] = $event => $options.setDropdownState($props.fixedDropdownButton ? !$data.showDropdown : true, true)),\n    onMousedown: _cache[12] || (_cache[12] = (...args) => $options.keepFocusing(...args))\n  }, [renderSlot(_ctx.$slots, \"dropdownButton\", {}, () => [_hoisted_3])], 34\n  /* CLASS, HYDRATE_EVENTS */\n  )) : createCommentVNode(\"v-if\", true)])) : createCommentVNode(\"v-if\", true), _ctx.$slots && _ctx.$slots.icon ? (openBlock(), createBlock(\"div\", _hoisted_4, [renderSlot(_ctx.$slots, \"icon\")])) : createCommentVNode(\"v-if\", true), $data.showDropdown ? (openBlock(), createBlock(\"div\", {\n    key: 2,\n    class: \"time-picker-overlay\",\n    onClick: _cache[13] || (_cache[13] = (...args) => $options.toggleActive(...args)),\n    tabindex: \"-1\"\n  })) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(\"div\", {\n    class: [\"dropdown\", [$options.dropdownDirClass]],\n    tabindex: \"-1\",\n    style: $options.inputWidthStyle,\n    onMouseup: _cache[42] || (_cache[42] = (...args) => $options.keepFocusing(...args)),\n    onClick: _cache[43] || (_cache[43] = withModifiers(() => {}, [\"stop\"]))\n  }, [createVNode(\"div\", {\n    class: \"select-list\",\n    style: $options.inputWidthStyle,\n    tabindex: \"-1\"\n  }, [createCommentVNode(\" Common Keyboard Support: less event listeners \"), !$props.advancedKeyboard ? (openBlock(true), createBlock(Fragment, {\n    key: 0\n  }, renderList($options.columnsSequence, column => {\n    return openBlock(), createBlock(Fragment, {\n      key: column\n    }, [column === 'hour' ? (openBlock(), createBlock(\"ul\", {\n      key: 0,\n      class: \"hours\",\n      onScroll: _cache[14] || (_cache[14] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.hourLabelText)\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.hours, (hr, hIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: hIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('hour', hr) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.hour === hr\n        },\n        disabled: $options.booleanAttr($options.isDisabled('hour', hr)),\n        \"data-key\": hr,\n        textContent: toDisplayString(hr),\n        onClick: $event => $options.select('hour', hr)\n      }, null, 10\n      /* CLASS, PROPS */\n      , [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true), column === 'minute' ? (openBlock(), createBlock(\"ul\", {\n      key: 1,\n      class: \"minutes\",\n      onScroll: _cache[15] || (_cache[15] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.minuteLabelText)\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.minutes, (m, mIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: mIndex\n      }, [!$options.opts.hideDisabledMinutes || $options.opts.hideDisabledMinutes && !$options.isDisabled('minute', m) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.minute === m\n        },\n        disabled: $options.booleanAttr($options.isDisabled('minute', m)),\n        \"data-key\": m,\n        textContent: toDisplayString(m),\n        onClick: $event => $options.select('minute', m)\n      }, null, 10\n      /* CLASS, PROPS */\n      , [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true), column === 'second' ? (openBlock(), createBlock(\"ul\", {\n      key: 2,\n      class: \"seconds\",\n      onScroll: _cache[16] || (_cache[16] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.secondLabelText)\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.seconds, (s, sIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: sIndex\n      }, [!$options.opts.hideDisabledSeconds || $options.opts.hideDisabledSeconds && !$options.isDisabled('second', s) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.second === s\n        },\n        disabled: $options.booleanAttr($options.isDisabled('second', s)),\n        \"data-key\": s,\n        textContent: toDisplayString(s),\n        onClick: $event => $options.select('second', s)\n      }, null, 10\n      /* CLASS, PROPS */\n      , [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true), column === 'apm' ? (openBlock(), createBlock(\"ul\", {\n      key: 3,\n      class: \"apms\",\n      onScroll: _cache[17] || (_cache[17] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.apmLabelText)\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.apms, (a, aIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: aIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('apm', a) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.apm === a\n        },\n        disabled: $options.booleanAttr($options.isDisabled('apm', a)),\n        \"data-key\": a,\n        textContent: toDisplayString($options.apmDisplayText(a)),\n        onClick: $event => $options.select('apm', a)\n      }, null, 10\n      /* CLASS, PROPS */\n      , [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true)], 64\n    /* STABLE_FRAGMENT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  )) : createCommentVNode(\"v-if\", true), createCommentVNode(\" / Common Keyboard Support \"), createCommentVNode(\"\\n        Advanced Keyboard Support\\n        Addeds hundreds of additional event lisenters\\n      \"), $props.advancedKeyboard ? (openBlock(true), createBlock(Fragment, {\n    key: 1\n  }, renderList($options.columnsSequence, column => {\n    return openBlock(), createBlock(Fragment, {\n      key: column\n    }, [column === 'hour' ? (openBlock(), createBlock(\"ul\", {\n      key: 0,\n      class: \"hours\",\n      tabindex: \"-1\",\n      onScroll: _cache[23] || (_cache[23] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.hourLabelText),\n      tabindex: \"-1\"\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.hours, (hr, hIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: hIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('hour', hr) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.hour === hr\n        },\n        tabindex: $options.isDisabled('hour', hr) ? -1 : $props.tabindex,\n        \"data-key\": hr,\n        disabled: $options.booleanAttr($options.isDisabled('hour', hr)),\n        textContent: toDisplayString(hr),\n        onClick: $event => $options.select('hour', hr),\n        onKeydown: [withKeys(withModifiers($event => $options.select('hour', hr), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('hour', hr), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('hour', hr), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('hour', hr), [\"prevent\"]), [\"down\"]), _cache[18] || (_cache[18] = withKeys(withModifiers($event => $options.toLeftColumn('hour'), [\"prevent\"]), [\"left\"])), _cache[19] || (_cache[19] = withKeys(withModifiers($event => $options.toRightColumn('hour'), [\"prevent\"]), [\"right\"])), _cache[20] || (_cache[20] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[21] || (_cache[21] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[22] || (_cache[22] = (...args) => $options.keepFocusing(...args))\n      }, null, 42\n      /* CLASS, PROPS, HYDRATE_EVENTS */\n      , [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true), column === 'minute' ? (openBlock(), createBlock(\"ul\", {\n      key: 1,\n      class: \"minutes\",\n      tabindex: \"-1\",\n      onScroll: _cache[29] || (_cache[29] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.minuteLabelText),\n      tabindex: \"-1\"\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.minutes, (m, mIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: mIndex\n      }, [!$options.opts.hideDisabledMinutes || $options.opts.hideDisabledMinutes && !$options.isDisabled('minute', m) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.minute === m\n        },\n        tabindex: $options.isDisabled('minute', m) ? -1 : $props.tabindex,\n        \"data-key\": m,\n        disabled: $options.booleanAttr($options.isDisabled('minute', m)),\n        textContent: toDisplayString(m),\n        onClick: $event => $options.select('minute', m),\n        onKeydown: [withKeys(withModifiers($event => $options.select('minute', m), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('minute', m), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('minute', m), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('minute', m), [\"prevent\"]), [\"down\"]), _cache[24] || (_cache[24] = withKeys(withModifiers($event => $options.toLeftColumn('minute'), [\"prevent\"]), [\"left\"])), _cache[25] || (_cache[25] = withKeys(withModifiers($event => $options.toRightColumn('minute'), [\"prevent\"]), [\"right\"])), _cache[26] || (_cache[26] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[27] || (_cache[27] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[28] || (_cache[28] = (...args) => $options.keepFocusing(...args))\n      }, null, 42\n      /* CLASS, PROPS, HYDRATE_EVENTS */\n      , [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true), column === 'second' ? (openBlock(), createBlock(\"ul\", {\n      key: 2,\n      class: \"seconds\",\n      tabindex: \"-1\",\n      onScroll: _cache[35] || (_cache[35] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.secondLabelText),\n      tabindex: \"-1\"\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.seconds, (s, sIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: sIndex\n      }, [!$options.opts.hideDisabledSeconds || $options.opts.hideDisabledSeconds && !$options.isDisabled('second', s) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.second === s\n        },\n        tabindex: $options.isDisabled('second', s) ? -1 : $props.tabindex,\n        \"data-key\": s,\n        disabled: $options.booleanAttr($options.isDisabled('second', s)),\n        textContent: toDisplayString(s),\n        onClick: $event => $options.select('second', s),\n        onKeydown: [withKeys(withModifiers($event => $options.select('second', s), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('second', s), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('second', s), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('second', s), [\"prevent\"]), [\"down\"]), _cache[30] || (_cache[30] = withKeys(withModifiers($event => $options.toLeftColumn('second'), [\"prevent\"]), [\"left\"])), _cache[31] || (_cache[31] = withKeys(withModifiers($event => $options.toRightColumn('second'), [\"prevent\"]), [\"right\"])), _cache[32] || (_cache[32] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[33] || (_cache[33] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[34] || (_cache[34] = (...args) => $options.keepFocusing(...args))\n      }, null, 42\n      /* CLASS, PROPS, HYDRATE_EVENTS */\n      , [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true), column === 'apm' ? (openBlock(), createBlock(\"ul\", {\n      key: 3,\n      class: \"apms\",\n      tabindex: \"-1\",\n      onScroll: _cache[41] || (_cache[41] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.apmLabelText),\n      tabindex: \"-1\"\n    }, null, 8\n    /* PROPS */\n    , [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.apms, (a, aIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: aIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('apm', a) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.apm === a\n        },\n        tabindex: $options.isDisabled('apm', a) ? -1 : $props.tabindex,\n        \"data-key\": a,\n        disabled: $options.booleanAttr($options.isDisabled('apm', a)),\n        textContent: toDisplayString($options.apmDisplayText(a)),\n        onClick: $event => $options.select('apm', a),\n        onKeydown: [withKeys(withModifiers($event => $options.select('apm', a), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('apm', a), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('apm', a), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('apm', a), [\"prevent\"]), [\"down\"]), _cache[36] || (_cache[36] = withKeys(withModifiers($event => $options.toLeftColumn('apm'), [\"prevent\"]), [\"left\"])), _cache[37] || (_cache[37] = withKeys(withModifiers($event => $options.toRightColumn('apm'), [\"prevent\"]), [\"right\"])), _cache[38] || (_cache[38] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[39] || (_cache[39] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[40] || (_cache[40] = (...args) => $options.keepFocusing(...args))\n      }, null, 42\n      /* CLASS, PROPS, HYDRATE_EVENTS */\n      , [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64\n      /* STABLE_FRAGMENT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))], 32\n    /* HYDRATE_EVENTS */\n    )) : createCommentVNode(\"v-if\", true)], 64\n    /* STABLE_FRAGMENT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  )) : createCommentVNode(\"v-if\", true), createCommentVNode(\" / Advanced Keyboard Support \")], 4\n  /* STYLE */\n  )], 38\n  /* CLASS, STYLE, HYDRATE_EVENTS */\n  ), [[vShow, $data.showDropdown]])], 4\n  /* STYLE */\n  );\n}\n\nscript.render = render;\nscript.__file = \"src/VueTimepicker.vue\";\nexport default script;","map":{"version":3,"mappings":"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","names":["CONFIG","HOUR_TOKENS","MINUTE_TOKENS","SECOND_TOKENS","APM_TOKENS","BASIC_TYPES","DEFAULT_OPTIONS","format","minuteInterval","secondInterval","hourRange","minuteRange","secondRange","hideDisabledHours","hideDisabledMinutes","hideDisabledSeconds","hideDisabledItems","advancedKeyboard","hideDropdown","blurDelay","manualInputTimeout","dropOffsetHeight","name","props","modelValue","type","Object","String","Number","Array","Boolean","default","hideClearButton","disabled","closeOnComplete","id","inputClass","placeholder","tabindex","inputWidth","autocomplete","hourLabel","minuteLabel","secondLabel","apmLabel","amText","pmText","lazy","autoScroll","dropDirection","containerId","manualInput","fixedDropdownButton","debugMode","data","timeValue","hours","minutes","seconds","apms","isActive","showDropdown","isFocusing","debounceTimer","undefined","hourType","minuteType","secondType","apmType","hour","minute","second","apm","fullValues","bakDisplayTime","doClearApmChecking","selectionTimer","kbInputTimer","kbInputLog","bakCurrentPos","forceDropOnTop","emits","computed","opts","options","assign","length","isNumber","debugLog","isArray","JSON","parse","stringify","useStringValue","formatString","inUse","typesInUse","filter","getTokenByType","sort","l","r","indexOf","tokensInUse","map","types","tokens","displayTime","replace","RegExp","customDisplayTime","apmDisplayText","inputIsEmpty","allValueSelected","columnsSequence","showClearBtn","showDropdownBtn","baseOn12Hours","hourRangeIn24HrFormat","range","forEach","value","start","end","is12hRange","translate12hRange","i","includes","push","restrictedHourRange","validHoursList","list","hr","substr","formatValue","am12Index","unshift","splice","shift","concat","has","result","customApmText","apmEnabled","am","some","pm","minuteRangeList","renderRangeList","secondRangeList","hourLabelText","minuteLabelText","secondLabelText","apmLabelText","inputWidthStyle","width","tokenRegexBase","join","tokenChunks","tokensRegxStr","tokensMatchAll","getMatchAllByRegex","tkMatch","rawToken","tokenMatchItem","index","token","getTokenType","needsCalibrate","len","needsPosCalibrate","chk","tokenChunksPos","calibrateLen","chunkCurrentLen","toLowerCase","invalidValues","isEmptyValue","isValidValue","isDisabled","notInInterval","hasInvalidInput","autoDirectionEnabled","dropdownDirClass","watch","newValue","renderFormat","newInteval","renderList","deep","handler","readValues","fillValues","toDisabled","newLength","oldLength","$emit","methods","checkAcceptingType","validValues","newFormat","renderHoursList","renderApmList","nextTick","hoursCount","listType","interval","isMinuteOrSecond","isMinute","readStringValues","readObjectValues","objValue","values","keys","addFallbackValues","sanitizedValue","testString","regexString","str","needsPolyfill","matchAll","polyfillMatchAll","stringValue","othersRegxStr","othersMatchAll","chunks","isValueToken","otMatch","regexCombo","chunk","tokenRegex","getTokenRegex","safeChars","comboReg","test","matchResults","match","valueResults","slice","vrIndex","targetToken","setValueFromString","tokenChunksForLog","tChunk","targetString","regxStr","matchesList","indicesReg","matchedItem","existIndex","findIndex","idxItem","regex","exec","itemIndicesRegex","parsedValue","tokenType","stdValue","forceEmit","baseHour","baseHourType","apmValue","lowerCasedApm","a","A","toUpperCase","hourValue","m","mm","s","ss","emitTimeValue","toggleActive","valueT","match12hRange","isBasicType","isDisabledHour","section","rawRange","formatedValue","fullList","validItems","item","forceApmSelection","emptyApmSelection","setDropdownState","$refs","input","selectionStart","selectionEnd","selectFirstSlot","checkForAutoScroll","toShow","fromUserClick","keepFocusing","checkDropDirection","blurEvent","select","clearTime","scrollToSelectedValues","firstColumn","scrollToSelected","column","allowFallback","targetList","$el","querySelectorAll","targetValue","activeItemInCol","validItemsInCol","scrollTop","offsetTop","focus","onFocus","escBlur","window","clearTimeout","inputBox","blur","debounceBlur","setTimeout","onBlur","columnClass","getClosestSibling","dataKey","getPrevious","siblingsInCol","selfIndex","prototype","call","sbl","getAttribute","prevItem","isManualInput","targetItem","nextItem","getSideColumnName","currentColumn","toLeft","currentColumnIndex","getFirstItemInSideColumn","targetColumn","listItems","getActiveItemInSideColumn","activeItems","toLeftColumn","toRightColumn","onMouseDown","nearestSlot","getNearestChunkByPos","debounceSetInputSelection","keyDownHandler","evt","isComposing","keyCode","preventDefault","stopPropagation","keyboardInput","key","clearKbInputLog","arrowHandler","tabHandler","metaKey","ctrlKey","onCompostionStart","getCurrentTokenChunk","onCompostionEnd","cpsData","inputIsCustomApmText","isCustomApmText","setSanitizedValueToSection","bakPos","pasteHandler","pastingText","clipboardData","getData","replaceCustomApmText","setKbInput","debounceClearKbLog","direction","selectFirstValidValue","currentChunk","getClosestValidItemInCol","newChunkPos","toLateralToken","firstChunk","lastChunk","shiftKey","newChar","isApm","chunkType","chunkToken","validValue","lastInputValue","onChange","autoFillValue","startPos","nearest","nearestDelta","delta","Math","abs","firstSlotType","getClosestHourItem","currentValue","setManualHour","currentIndex","valueKey","nextIndex","inputValue","hourT","setInputSelectionRange","setSelectionRange","firstChunkPos","currentChunkIndex","targetSlotPos","inputData","inputString","container","document","getElementById","el","spaceDown","offsetHeight","docHeight","max","body","scrollHeight","documentElement","clientHeight","isNaN","parseFloat","isFinite","testValue","tokenRegexStr","booleanAttr","isTrue","logText","identifier","inputClasses","split","clsName","trim","finalLogText","console","debug","log","mounted","beforeUnmount"],"sources":["../src/VueTimepicker.vue"],"sourcesContent":["<script>\nimport { nextTick } from 'vue'\n\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a'],\n  BASIC_TYPES: ['hour', 'minute', 'second', 'apm']\n}\n\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false,\n  advancedKeyboard: false,\n  hideDropdown: false,\n  blurDelay: 300,\n  manualInputTimeout: 1000,\n  dropOffsetHeight: 160\n}\n\nexport default {\n  name: 'VueTimepicker',\n\n  props: {\n    modelValue: { type: [ Object, String ] },\n    format: { type: String },\n    minuteInterval: { type: [ Number, String ] },\n    secondInterval: { type: [ Number, String ] },\n\n    hourRange: { type: Array },\n    minuteRange: { type: Array },\n    secondRange: { type: Array },\n\n    hideDisabledHours: { type: Boolean, default: false },\n    hideDisabledMinutes: { type: Boolean, default: false },\n    hideDisabledSeconds: { type: Boolean, default: false },\n    hideDisabledItems: { type: Boolean, default: false },\n\n    hideClearButton: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    closeOnComplete: { type: Boolean, default: false },\n\n    id: { type: String },\n    name: { type: String },\n    inputClass: { type: [ String, Object, Array ] },\n    placeholder: { type: String },\n    tabindex: { type: [ Number, String ], default: 0 },\n    inputWidth: { type: String },\n    autocomplete: { type: String, default: 'off' },\n\n    hourLabel: { type: String },\n    minuteLabel: { type: String },\n    secondLabel: { type: String },\n    apmLabel: { type: String },\n    amText: { type: String },\n    pmText: { type: String },\n\n    blurDelay: { type: [ Number, String ] },\n    advancedKeyboard: { type: Boolean, default: false },\n\n    lazy: { type: Boolean, default: false },\n    autoScroll: { type: Boolean, default: false },\n\n    dropDirection: { type: String, default: 'down' },\n    dropOffsetHeight: { type: [ Number, String ] },\n    containerId: { type: String },\n\n    manualInput: { type: Boolean, default: false },\n    manualInputTimeout: { type: [ Number, String ] },\n    hideDropdown: { type: Boolean, default: false },\n    fixedDropdownButton: { type: Boolean, default: false },\n\n    debugMode: { type: Boolean, default: false }\n  },\n\n  data () {\n    return {\n      timeValue: {},\n\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n\n      isActive: false,\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined,\n      doClearApmChecking: false,\n\n      selectionTimer: undefined,\n      kbInputTimer: undefined,\n      kbInputLog: '',\n      bakCurrentPos: undefined,\n      forceDropOnTop: false\n    }\n  },\n\n  emits: ['update:modelValue', 'change', 'open', 'close', 'focus', 'blur', 'error'],\n\n  computed: {\n    opts () {\n      const options = Object.assign({}, DEFAULT_OPTIONS)\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format)\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval\n      }\n      // minuteInterval failsafe\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (this.debugMode) {\n          if (options.minuteInterval > 60) {\n            this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`)\n          } else if (options.minuteInterval === 0 || options.minuteInterval < 1) {\n            this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`)\n          }\n        }\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60\n        } else {\n          options.minuteInterval = 1\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval\n      }\n      // secondInterval failsafe\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (this.debugMode) {\n          if (options.secondInterval > 60) {\n            this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`)\n          } else if (options.secondInterval === 0 || options.secondInterval < 1) {\n            this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`)\n          }\n        }\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60\n        } else {\n          options.secondInterval = 1\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange))\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange))\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange))\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true\n      }\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true\n      }\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true\n      }\n\n      if (this.hideDropdown) {\n        if (this.manualInput) {\n          options.hideDropdown = true\n        } else if (this.debugMode) {\n          this.debugLog('\"hide-dropdown\" only works with \"manual-input\" mode')\n        }\n      }\n\n      if (this.blurDelay && +this.blurDelay > 0) {\n        options.blurDelay = +this.blurDelay\n      }\n\n      if (this.manualInputTimeout && +this.manualInputTimeout > 0) {\n        options.manualInputTimeout = +this.manualInputTimeout\n      }\n\n      if (this.dropOffsetHeight && +this.dropOffsetHeight > 0) {\n        options.dropOffsetHeight = +this.dropOffsetHeight\n      }\n\n      return options\n    },\n\n    useStringValue () {\n      return typeof this.modelValue === 'string'\n    },\n\n    formatString () {\n      return this.opts.format || DEFAULT_OPTIONS.format\n    },\n\n    inUse () {\n      const typesInUse = CONFIG.BASIC_TYPES.filter(type => this.getTokenByType(type))\n      // Sort types and tokens by their sequence in the \"format\" string\n      typesInUse.sort((l, r) => {\n        return this.formatString.indexOf(this.getTokenByType(l) || null) - this.formatString.indexOf(this.getTokenByType(r) || null)\n      })\n      const tokensInUse = typesInUse.map(type => this.getTokenByType(type))\n      return {\n        hour: !!this.hourType,\n        minute: !!this.minuteType,\n        second: !!this.secondType,\n        apm: !!this.apmType,\n        types: typesInUse || [],\n        tokens: tokensInUse || []\n      }\n    },\n\n    displayTime () {\n      let formatString = String(this.formatString)\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour)\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute)\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second)\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm)\n      }\n      return formatString\n    },\n\n    customDisplayTime () {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime\n      }\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm))\n    },\n\n    inputIsEmpty () {\n      return this.formatString === this.displayTime\n    },\n\n    allValueSelected () {\n      if (\n        (this.inUse.hour && !this.hour) ||\n        (this.inUse.minute && !this.minute) ||\n        (this.inUse.second && !this.second) ||\n        (this.inUse.apm && !this.apm)\n      ) {\n        return false\n      }\n      return true\n    },\n\n    columnsSequence () {\n      return this.inUse.types.map(type => type) || []\n    },\n\n    showClearBtn () {\n      if (this.hideClearButton || this.disabled) {\n        return false\n      }\n      return !this.inputIsEmpty\n    },\n\n    showDropdownBtn () {\n      if (this.fixedDropdownButton) { return true }\n      if (this.opts.hideDropdown && this.isActive && !this.showDropdown) {\n        return true\n      }\n      return false\n    },\n\n    baseOn12Hours () {\n      return this.hourType === 'h' || this.hourType === 'hh'\n    },\n\n    hourRangeIn24HrFormat () {\n      if (!this.hourType || !this.opts.hourRange) { return false }\n      if (!this.opts.hourRange.length) { return [] }\n\n      const range = []\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n\n          let start = value[0]\n          let end = value[1] || value[0]\n\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start)\n          }\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end)\n          }\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) { continue }\n            if (!range.includes(i)) {\n              range.push(i)\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value)\n          } else {\n            value = +value\n          }\n          if (value < 0 || value > 24) { return }\n          if (!range.includes(value)) {\n            range.push(value)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      return range\n    },\n\n    restrictedHourRange () {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) { return false }\n      // 12-Hour\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map((value) => {\n          if (value === 12) {\n            return '12p'\n          } else if (value === 24 || value === 0) {\n            return '12a'\n          }\n          return value > 12 ? `${value % 12}p` : `${value}a`\n        })\n        return range\n      }\n      // 24-Hour\n      return this.hourRangeIn24HrFormat\n    },\n\n    validHoursList () {\n      if (!this.manualInput) { return false }\n      if (this.restrictedHourRange) {\n        let list = []\n        if (this.baseOn12Hours) {\n          list = this.restrictedHourRange.map(hr => {\n            const l = hr.substr(0, hr.length - 1)\n            const r = hr.substr(-1)\n            return `${this.formatValue(this.hourType, l)}${r}`\n          })\n          const am12Index = list.indexOf('12a')\n          if (am12Index > 0) {\n            // Make '12a' the first item in h/hh\n            list.unshift(list.splice(am12Index, 1)[0])\n          }\n          return list\n        }\n        list = this.restrictedHourRange.map(hr => {\n          return this.formatValue(this.hourType, hr)\n        })\n        if (list.length > 1 && list[0] && list[0] === '24') {\n          // Make '24' the last item in k/kk\n          list.push(list.shift())\n        }\n        return list\n      }\n      if (this.baseOn12Hours) {\n        return [].concat([], this.hours.map(hr => `${hr}a`), this.hours.map(hr => `${hr}p`))\n      }\n      return this.hours\n    },\n\n    has () {\n      const result = {\n        customApmText: false\n      }\n      const apmEnabled = !!this.apmType\n\n      if (apmEnabled && this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat)\n        result.am = range.some(value => value < 12 || value === 24)\n        result.pm = range.some(value => value >= 12 && value < 24)\n      } else {\n        result.am = apmEnabled\n        result.pm = apmEnabled\n      }\n      if ((this.amText && this.amText.length) || (this.pmText && this.pmText.length)) {\n        result.customApmText = true\n      }\n      return result\n    },\n\n    minuteRangeList () {\n      if (!this.minuteType || !this.opts.minuteRange) { return false }\n      if (!this.opts.minuteRange.length) { return [] }\n      return this.renderRangeList(this.opts.minuteRange, 'minute')\n    },\n\n    secondRangeList () {\n      if (!this.secondType || !this.opts.secondRange) { return false }\n      if (!this.opts.secondRange.length) { return [] }\n      return this.renderRangeList(this.opts.secondRange, 'second')\n    },\n    \n    hourLabelText () {\n      return this.hourLabel || this.hourType\n    },\n    minuteLabelText () {\n      return this.minuteLabel || this.minuteType\n    },\n    secondLabelText() {\n      return this.secondLabel || this.secondType\n    },\n    apmLabelText () {\n      return this.apmLabel || this.apmType\n    },\n\n    inputWidthStyle () {\n      if (!this.inputWidth || !this.inputWidth.length) { return }\n      return {\n        width: this.inputWidth\n      }\n    },\n\n    tokenRegexBase () {\n      return this.inUse.tokens.join('|')\n    },\n\n    tokenChunks () {\n      if (!this.manualInput && !this.useStringValue) { return false }\n\n      const formatString = String(this.formatString)\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr)\n\n      const tokenChunks = []\n      for (let tkMatch of tokensMatchAll) {\n        const rawToken = tkMatch[0]\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: rawToken,\n          type: this.getTokenType(rawToken),\n          needsCalibrate: rawToken.length < 2,\n          len: (rawToken || '').length\n        }\n        tokenChunks.push(tokenMatchItem)\n      }\n      return tokenChunks\n    },\n\n    needsPosCalibrate () {\n      if (!this.manualInput) { return false }\n      return this.tokenChunks.some(chk => chk.needsCalibrate)\n    },\n\n    tokenChunksPos () {\n      if (!this.manualInput) { return false }\n      if (!this.needsPosCalibrate) {\n        return this.tokenChunks.map(chk => {\n          return {\n            token: chk.token,\n            type: chk.type,\n            start: chk.index,\n            end: chk.index + chk.len\n          }\n        })\n      }\n      const list = []\n      let calibrateLen = 0\n      this.tokenChunks.forEach(chk => {\n        let chunkCurrentLen\n        // Adjust for customized AM/PM text\n        if (chk.type === 'apm' && this.has.customApmText) {\n          if (this.apm && this.apm.length) {\n            const customApmText = this.apm.toLowerCase() === 'am' ? this.amText : this.pmText\n            chunkCurrentLen = (customApmText && customApmText.length) ? customApmText.length : chk.len\n          } else {\n            chunkCurrentLen = chk.len\n          }\n        // Others\n        } else {\n          chunkCurrentLen = this[chk.type] && this[chk.type].length ? this[chk.type].length : chk.len\n        }\n        list.push({\n          token: chk.token,\n          type: chk.type,\n          start: chk.index + calibrateLen,\n          end: chk.index + calibrateLen + chunkCurrentLen\n        })\n        if (chk.needsCalibrate && chunkCurrentLen > chk.len) {\n          calibrateLen += (chunkCurrentLen - chk.len)\n        }\n      })\n      return list\n    },\n\n    invalidValues () {\n      if (this.inputIsEmpty) { return [] }\n      if (!this.restrictedHourRange && !this.minuteRangeList && !this.secondRangeList && this.opts.minuteInterval === 1 && this.opts.secondInterval === 1) { return [] }\n\n      const result = []\n      if (this.inUse.hour && !this.isEmptyValue(this.hourType, this.hour) && (!this.isValidValue(this.hourType, this.hour) || this.isDisabled('hour', this.hour))) {\n        result.push('hour')\n      }\n      if (this.inUse.minute && !this.isEmptyValue(this.minuteType, this.minute) && (!this.isValidValue(this.minuteType, this.minute) || this.isDisabled('minute', this.minute) || this.notInInterval('minute', this.minute))) {\n        result.push('minute')\n      }\n      if (this.inUse.second && !this.isEmptyValue(this.secondType, this.second) && (!this.isValidValue(this.secondType, this.second) || this.isDisabled('second', this.second) || this.notInInterval('second', this.second))) {\n        result.push('second')\n      }\n      if (this.inUse.apm && !this.isEmptyValue(this.apmType, this.apm) && (!this.isValidValue(this.apmType, this.apm) || this.isDisabled('apm', this.apm))) {\n        result.push('apm')\n      }\n      if (result.length) {\n        return result\n      }\n      return []\n    },\n\n    hasInvalidInput () {\n      return Boolean(this.invalidValues && this.invalidValues.length)\n    },\n\n    autoDirectionEnabled () {\n      return this.dropDirection === 'auto'\n    },\n\n    dropdownDirClass () {\n      if (this.autoDirectionEnabled) {\n        return this.forceDropOnTop ? 'drop-up' : 'drop-down'\n      }\n      return this.dropDirection === 'up' ? 'drop-up' : 'drop-down'      \n    }\n  },\n\n  watch: {\n    'opts.format' (newValue) {\n      this.renderFormat(newValue)\n    },\n    'opts.minuteInterval' (newInteval) {\n      this.renderList('minute', newInteval)\n    },\n    'opts.secondInterval' (newInteval) {\n      this.renderList('second', newInteval)\n    },\n    value: {\n      deep: true,\n      handler () {\n        this.readValues()\n      }\n    },\n    displayTime () {\n      this.fillValues()\n    },\n    disabled (toDisabled) {\n      if (toDisabled) {\n        // Force close dropdown and reset status when disabled\n        if (this.isActive) {\n          this.isActive = false\n        }\n        if (this.showDropdown) {\n          this.showDropdown = false\n        }\n      }\n    },\n    'invalidValues.length' (newLength, oldLength) {\n      if (newLength && newLength >= 1) {\n        this.$emit('error', this.invalidValues)\n      } else if (oldLength && oldLength >= 1) {\n        this.$emit('error', [])\n      }\n    }\n  },\n\n  methods: {\n    formatValue (token, i) {\n      if (!this.isNumber(i)) { return '' }\n      i = +i\n      switch (token) {\n        case 'H':\n        case 'h':\n        case 'k':\n        case 'm':\n        case 's':\n          if (['h', 'k'].includes(token) && i === 0) {\n            return token === 'k' ? '24' : '12'\n          }\n          return String(i)\n        case 'HH':\n        case 'mm':\n        case 'ss':\n        case 'hh':\n        case 'kk':\n          if (['hh', 'kk'].includes(token) && i === 0) {\n            return token === 'kk' ? '24' : '12'\n          }\n          return i < 10 ? `0${i}` : String(i)\n        default:\n          return ''\n      }\n    },\n\n    checkAcceptingType (validValues, formatString) {\n      if (!validValues || !formatString || !formatString.length) { return '' }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i]\n        }\n      }\n      return ''\n    },\n\n    renderFormat (newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format\n\n      let hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat)\n      let minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat)\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat)\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat)\n\n      // Failsafe checking\n      if (!hourType && !minuteType && !this.secondType && !this.apmType) {\n        if (this.debugMode && this.format) {\n          this.debugLog(`No valid tokens found in your defined \"format\" string \"${this.format}\". Fallback to the default \"HH:mm\" format.`)\n        }\n        hourType = 'HH'\n        minuteType = 'mm'\n      }\n      this.hourType = hourType\n      this.minuteType = minuteType\n\n      this.hourType ? this.renderHoursList() : this.hours = []\n      this.minuteType ? this.renderList('minute') : this.minutes = []\n      this.secondType ? this.renderList('second') : this.seconds = []\n      this.apmType ? this.renderApmList() : this.apms = []\n\n      nextTick(() => {\n        this.readValues()\n      })\n    },\n\n    renderHoursList () {\n      const hoursCount = this.baseOn12Hours ? 12 : 24\n      const hours = []\n      for (let i = 0; i < hoursCount; i++) {\n        if (this.hourType === 'k' || this.hourType === 'kk') {\n          hours.push(this.formatValue(this.hourType, i + 1))\n        } else {\n          hours.push(this.formatValue(this.hourType, i))\n        }\n      }\n      this.hours = hours\n    },\n\n    renderList (listType, interval) {\n      if (!this.isMinuteOrSecond(listType)) { return }\n\n      const isMinute = listType === 'minute'\n      interval = interval || (isMinute ? (this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval) : (this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval))\n\n      const result = []\n      for (let i = 0; i < 60; i += interval) {\n        result.push(this.formatValue(isMinute ? this.minuteType : this.secondType, i))\n      }\n      isMinute ? this.minutes = result : this.seconds = result\n    },\n\n    renderApmList () {\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm']\n    },\n\n    readValues () {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.modelValue}\"`)\n        }\n        this.readStringValues(this.modelValue)\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.modelValue || {})}\"`)\n        }\n        this.readObjectValues(this.modelValue)\n      }\n    },\n\n    readObjectValues (objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}))\n      const values = Object.keys(timeValue)\n\n      // Failsafe for empty `v-model` object\n      if (values.length === 0) {\n        this.addFallbackValues()\n        return\n      }\n\n      CONFIG.BASIC_TYPES.forEach(type => {\n        const token = this.getTokenByType(type)\n        if (values.indexOf(token) > -1) {\n          const sanitizedValue = this.sanitizedValue(token, timeValue[token])\n          this[type] = sanitizedValue\n          timeValue[token] = sanitizedValue\n        } else {\n          this[type] = ''\n        }\n      })\n      this.timeValue = timeValue\n    },\n\n    getMatchAllByRegex (testString, regexString) {\n      const str = 'polyfillTest'\n      const needsPolyfill = Boolean(!str.matchAll || typeof str.matchAll !== 'function')\n      return needsPolyfill ? this.polyfillMatchAll(testString, regexString) : testString.matchAll(new RegExp(regexString, 'g'))\n    },\n\n    readStringValues (stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues()\n        return\n      }\n\n      const formatString = String(this.formatString)\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`\n      const othersRegxStr = `[^(${this.tokenRegexBase})]+`\n\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr)\n      const othersMatchAll = this.getMatchAllByRegex(formatString, othersRegxStr)\n\n      const chunks = []\n      const tokenChunks = []\n\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        }\n        chunks.push(tokenMatchItem)\n        tokenChunks.push(tokenMatchItem)\n      }\n\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        })\n      }\n\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1)\n\n      let regexCombo = ''\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || ''\n          regexCombo += tokenRegex\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1')\n          regexCombo += `(?:${safeChars})`\n        }\n      })\n\n      const comboReg = new RegExp(regexCombo)\n\n      // Do test before match\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo))\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1)\n        const timeValue = {}\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const targetToken = tokenChunks[vrIndex].token\n            timeValue[targetToken] = this.setValueFromString(value, targetToken)\n          }\n        })\n        this.timeValue = timeValue\n\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token)\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`)\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${stringValue}`)\n        }\n      }\n    },\n\n    polyfillMatchAll (targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'))\n      const result = []\n      const indicesReg = []\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem)\n          let index\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g')\n            index = itemIndicesRegex.exec(targetString).index\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            })\n          }\n          result.push({\n            0: String(matchedItem),\n            index: index\n          })\n        })\n      }\n      return result\n    },\n\n    addFallbackValues () {\n      const timeValue = {}\n      this.inUse.types.forEach(type => {\n        timeValue[this.getTokenByType(type)] = ''\n      })\n      this.timeValue = timeValue\n    },\n\n    setValueFromString (parsedValue, token) {\n      if (!token || !parsedValue) { return '' }\n      const tokenType = this.getTokenType(token)\n      if (!tokenType || !tokenType.length) { return '' }\n      const stdValue = (parsedValue !== this.getTokenByType(tokenType)) ? parsedValue : ''\n      this[tokenType] = stdValue\n      return stdValue\n    },\n\n    fillValues (forceEmit) {\n      const fullValues = {}\n\n      const baseHour = this.hour\n      const baseHourType = this.hourType\n\n      let apmValue\n\n      // Hour type or hour value is NOT set in the \"format\" string\n      if (!baseHourType || !this.isNumber(baseHour)) {\n        CONFIG.HOUR_TOKENS.forEach(token => fullValues[token] = '')\n        apmValue = this.lowerCasedApm(this.apm || '')\n        fullValues.a = apmValue\n        fullValues.A = apmValue.toUpperCase()\n\n      // Both Hour type and value are set\n      } else {\n        const hourValue = +baseHour\n        const apmValue = (this.baseOn12Hours && this.apm) ? this.lowerCasedApm(this.apm) : false\n\n        CONFIG.HOUR_TOKENS.forEach((token) => {\n          if (token === baseHourType) {\n            fullValues[token] = baseHour\n            return\n          }\n\n          let value\n          let apm\n          switch (token) {\n            case 'H':\n            case 'HH':\n            case 'k':\n            case 'kk':\n              if (this.baseOn12Hours) {\n                if (apmValue === 'pm') {\n                  value = hourValue < 12 ? hourValue + 12 : hourValue\n                } else if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 12 ? 24 : hourValue\n                } else {\n                  value = hourValue % 12\n                }\n              } else {\n                if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 0 ? 24 : hourValue\n                } else {\n                  value = hourValue % 24\n                }\n              }\n              fullValues[token] = this.formatValue(token, value)\n              break\n            case 'h':\n            case 'hh':\n              // h <-> hh\n              if (this.baseOn12Hours) {\n                value = hourValue\n                apm = apmValue || ''\n              // Read from other hour formats\n              } else {\n                if (hourValue > 11 && hourValue < 24) {\n                  apm = 'pm'\n                  value = hourValue === 12 ? 12 : hourValue % 12\n                } else {\n                  apm = 'am'\n                  value = hourValue % 12 === 0 ? 12 : hourValue\n                }\n              }\n              fullValues[token] = this.formatValue(token, value)\n              fullValues.a = apm\n              fullValues.A = apm.toUpperCase()\n              break\n          }\n        })\n      }\n\n      fullValues.m = this.formatValue('m', this.minute)\n      fullValues.mm = this.formatValue('mm', this.minute)\n      fullValues.s = this.formatValue('s', this.second)\n      fullValues.ss = this.formatValue('ss', this.second)\n\n      this.fullValues = fullValues\n\n      // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue()\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleActive()\n      }\n    },\n\n    emitTimeValue () {\n      if (!this.fullValues) { return }\n\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.')\n        }\n        return\n      }\n\n      const fullValues = JSON.parse(JSON.stringify(this.fullValues))\n\n      if (this.useStringValue) {\n        this.$emit('update:modelValue', this.inputIsEmpty ? '' : String(this.displayTime))\n      } else {\n        const tokensInUse = this.inUse.tokens || []\n        const timeValue = {}\n        tokensInUse.forEach((token) => {\n          timeValue[token] = fullValues[token] || ''\n        })\n        this.$emit('update:modelValue', JSON.parse(JSON.stringify(timeValue)))\n      }\n\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      })\n    },\n\n    translate12hRange (value) {\n      const valueT = this.match12hRange(value)\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12)\n      }\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0)\n    },\n\n    isDisabled (type, value) {\n      if (!this.isBasicType(type) || !this.inUse[type]) { return true }\n      switch (type) {\n        case 'hour':\n          return this.isDisabledHour(value)\n        case 'minute':\n        case 'second':\n          if (!this[`${type}RangeList`]) {\n            return false\n          }\n          return !this[`${type}RangeList`].includes(value)\n        case 'apm':\n          if (!this.restrictedHourRange) {\n            return false\n          }\n          return !this.has[this.lowerCasedApm(value)]\n        default:\n          return true\n      }\n    },\n\n    isDisabledHour (value) {\n      if (!this.restrictedHourRange) { return false }\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p'\n          return !this.restrictedHourRange.includes(`${+value}${token}`)\n        }\n      }\n      // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n      if (\n        (this.hourType === 'HH' || this.hourType === 'H') &&\n        +value === 0 && this.restrictedHourRange.includes(24)\n      ) {\n        return false\n      }\n      return !this.restrictedHourRange.includes(+value)\n    },\n\n    notInInterval (section, value) {\n      if (!section || !this.isMinuteOrSecond(section)) { return }\n      if (this.opts[`${section}Interval`] === 1) { return false }\n      return +value % this.opts[`${section}Interval`] !== 0\n    },\n\n    renderRangeList (rawRange, section) {\n      if (!rawRange || !section || !this.isMinuteOrSecond(section)) { return [] }\n      const range = []\n      let formatedValue\n      rawRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"${section}-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.getTokenByType(section), i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (+value < 0 || +value > 59) { return }\n          formatedValue = this.formatValue(this.getTokenByType(section), value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const fullList = (section === 'minute' ? this.minutes : this.seconds) || []\n        const validItems = fullList.filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          if (section === 'minute') {\n            this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`)\n          } else {\n            this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`)\n          }\n        }\n      }\n      return range\n    },\n\n    forceApmSelection () {\n      if (this.manualInput) {\n        // Skip this to allow users to paste a string value from the clipboard in Manual Input mode\n        return\n      }\n      if (this.apmType && !this.apm) {\n        if (this.has.am || this.has.pm) {\n          this.doClearApmChecking = true\n          const apmValue = this.has.am ? 'am' : 'pm'\n          this.apm = this.apmType === 'A' ? apmValue.toUpperCase() : apmValue\n        }\n      }\n    },\n\n    emptyApmSelection () {\n      if (this.doClearApmChecking && this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = ''\n      }\n      this.doClearApmChecking = false\n    },\n\n    apmDisplayText (apmValue) {\n      if (this.amText && this.lowerCasedApm(apmValue) === 'am') {\n        return this.amText\n      }\n      if (this.pmText && this.lowerCasedApm(apmValue) === 'pm') {\n        return this.pmText\n      }\n      return apmValue\n    },\n\n    toggleActive () {\n      if (this.disabled) { return }\n      this.isActive = !this.isActive\n\n      if (this.isActive) {\n        this.isFocusing = true\n        if (this.manualInput) {\n          this.$emit('focus')\n        }\n        if (!this.opts.hideDropdown) {\n          this.setDropdownState(true)\n        }\n        // Record to check if value did change in the later phase\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '')\n        }\n        if (this.manualInput && !this.inputIsEmpty) {\n          nextTick(() => {\n            if (this.$refs.input && this.$refs.input.selectionStart === 0 && this.$refs.input.selectionEnd === this.displayTime.length) {\n              // Select the first slot instead of the whole value string when tabbed in\n              this.selectFirstSlot()\n            }\n          })\n        }\n      } else {\n        if (this.showDropdown) {\n          this.setDropdownState(false)\n        } else if (this.manualInput) {\n          this.$emit('blur')\n        }\n        this.isFocusing = false\n        if (this.lazy) {\n          this.fillValues(true)\n          this.bakDisplayTime = undefined\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        this.showDropdown ? this.forceApmSelection() : this.emptyApmSelection()\n      }\n      if (this.showDropdown) {\n        this.checkForAutoScroll()\n      }\n    },\n\n    setDropdownState (toShow, fromUserClick = false) {\n      if (toShow) {\n        this.keepFocusing()\n        if (this.autoDirectionEnabled) {\n          this.checkDropDirection()\n        }\n        this.showDropdown = true\n        this.$emit('open') \n        if (fromUserClick) {\n          if (this.fixedDropdownButton) {\n            this.isActive = true\n          }\n          this.$emit('blur')\n          this.checkForAutoScroll()\n        }\n      } else {\n        this.showDropdown = false\n        this.$emit('close')\n      }\n    },\n\n    blurEvent () {\n      if (this.manualInput && !this.opts.hideDropdown) {\n        // hideDropdown's `blur` event is handled somewhere else\n        this.$emit('blur')\n      }\n    },\n\n    select (type, value) {\n      if (this.isBasicType(type) && !this.isDisabled(type, value)) {\n        this[type] = value\n        if (this.doClearApmChecking) {\n          this.doClearApmChecking = false\n        }\n      }\n    },\n\n    clearTime () {\n      if (this.disabled) { return }\n      this.hour = ''\n      this.minute = ''\n      this.second = ''\n      this.apm = ''\n\n      if (this.manualInput && this.$refs && this.$refs.input && this.$refs.input.value.length) {\n        this.$refs.input.value = ''\n      }\n\n      if (this.lazy) {\n        this.fillValues(true)\n      }\n    },\n\n    //\n    // Auto-Scroll\n    //\n\n    checkForAutoScroll () {\n      if (this.inputIsEmpty) { return }\n      if (this.autoScroll) {\n        nextTick(() => {\n          this.scrollToSelectedValues()\n        })\n      } else if (this.advancedKeyboard) {\n        // Auto-focus on selected value in the first column for advanced-keyboard\n        nextTick(() => {\n          const firstColumn = this.inUse.types[0]\n          this.scrollToSelected(firstColumn, true)\n        })\n      }\n    },\n\n    scrollToSelected (column, allowFallback = false) {\n      if (!this.timeValue || this.inputIsEmpty) { return }\n      const targetList = this.$el.querySelectorAll(`ul.${column}s`)[0]\n      let targetValue = this.activeItemInCol(column)[0]\n      if (!targetValue && allowFallback) {\n        // No value selected in the target column, fallback to the first found valid item\n        targetValue = this.validItemsInCol(column)[0]\n      }\n      if (targetList && targetValue) {\n        targetList.scrollTop = targetValue.offsetTop || 0\n        if (this.advancedKeyboard) {\n          targetValue.focus()\n        }\n      }\n    },\n\n    scrollToSelectedValues () {\n      if (!this.timeValue || this.inputIsEmpty) { return }\n      this.inUse.types.forEach(section => {\n        this.scrollToSelected(section)\n      })\n    },\n\n    //\n    // Additional Keyboard Navigation\n    //\n\n    onFocus () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n      if (!this.isActive) {\n        this.toggleActive()\n      }\n    },\n\n    escBlur () {\n      if (this.disabled) { return }\n      window.clearTimeout(this.debounceTimer)\n      this.isFocusing = false\n      const inputBox = this.$el.querySelectorAll('input.vue__time-picker-input')[0]\n      if (inputBox) {\n        inputBox.blur()\n      }\n    },\n\n    debounceBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      window.clearTimeout(this.debounceTimer)\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer)\n        this.onBlur()\n      }, this.opts.blurDelay)\n    },\n\n    onBlur () {\n      if (!this.disabled && !this.isFocusing && this.isActive) {\n        this.toggleActive()\n      }\n    },\n\n    keepFocusing () {\n      if (this.disabled) { return }\n      window.clearTimeout(this.debounceTimer)\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n    },\n\n    validItemsInCol (column) {\n      const columnClass = `${column}s`\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`)\n    },\n\n    activeItemInCol (column) {\n      const columnClass = `${column}s`\n      return this.$el.querySelectorAll(`ul.${columnClass} > li.active:not(.hint)`)\n    },\n\n    getClosestSibling (column, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(column)\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, (sbl) => {\n        return sbl.getAttribute('data-key') === dataKey\n      })\n\n      // Already the first item\n      if (getPrevious && selfIndex === 0) {\n        return siblingsInCol[siblingsInCol.length - 1]\n      }\n      // Already the last item\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        return siblingsInCol[0]\n      }\n      // Selected value not in the valid values list\n      if (selfIndex < 0) {\n        return siblingsInCol[0]\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1]\n      }\n      return siblingsInCol[selfIndex + 1]\n    },\n\n    prevItem (column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, true)\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus()\n      }\n    },\n\n    nextItem (column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, false)\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus()\n      }\n    },\n\n    getSideColumnName (currentColumn, toLeft = false) {\n      const currentColumnIndex = this.inUse.types.indexOf(currentColumn)\n      if (toLeft && currentColumnIndex <= 0) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already')\n        }\n        return\n      } else if (!toLeft && currentColumnIndex === (this.inUse.types.length - 1)) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already')\n        }\n        return\n      }\n      return this.inUse.types[toLeft ? currentColumnIndex - 1 : currentColumnIndex + 1]\n    },\n\n    getFirstItemInSideColumn (currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft)\n      if (!targetColumn) { return }\n      const listItems = this.validItemsInCol(targetColumn)\n      if (listItems && listItems[0]) {\n        return listItems[0]\n      }\n    },\n\n    getActiveItemInSideColumn (currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft)\n      if (!targetColumn) { return }\n      const activeItems = this.activeItemInCol(targetColumn)\n      if (activeItems && activeItems[0]) {\n        return activeItems[0]\n      }\n    },\n\n    toLeftColumn (currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, true) || this.getFirstItemInSideColumn(currentColumn, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    toRightColumn (currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, false) || this.getFirstItemInSideColumn(currentColumn, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    //\n    // Manual Input\n    //\n\n    onMouseDown () {\n      if (!this.manualInput) { return }\n      window.clearTimeout(this.selectionTimer)\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer)\n        if (this.$refs && this.$refs.input) {\n          const nearestSlot = this.getNearestChunkByPos(this.$refs.input.selectionStart || 0)\n          this.debounceSetInputSelection(nearestSlot)\n        }\n      }, 50)\n    },\n\n    keyDownHandler (evt) {\n      if (evt.isComposing || evt.keyCode === 229) {\n        // Skip IME inputs\n        evt.preventDefault()\n        evt.stopPropagation()\n        return false\n      }\n      // Numbers\n      if ((evt.keyCode >= 48 && evt.keyCode <= 57) || (evt.keyCode >= 96 && evt.keyCode <= 105)) {\n        evt.preventDefault()\n        this.keyboardInput(evt.key)\n      // A|P|M\n      } else if ([65, 80, 77].includes(evt.keyCode)) {\n        evt.preventDefault()\n        this.keyboardInput(evt.key, true)\n      // Arrow keys\n      } else if (evt.keyCode >= 37 && evt.keyCode <= 40) {\n        evt.preventDefault()\n        this.clearKbInputLog()\n        this.arrowHandler(evt)\n      // Delete|Backspace\n      } else if (evt.keyCode === 8 || evt.keyCode === 46) {\n        evt.preventDefault()\n        this.clearKbInputLog()\n        this.clearTime()\n      // Tab\n      } else if (evt.keyCode === 9) {\n        this.clearKbInputLog()\n        this.tabHandler(evt)\n      // Prevent any Non-ESC and non-pasting inputs\n      } else if (evt.keyCode !== 27 && !(evt.metaKey || evt.ctrlKey)) {\n        evt.preventDefault()\n      }\n    },\n\n    onCompostionStart (evt) {\n      evt.preventDefault()\n      evt.stopPropagation()\n      this.bakCurrentPos = this.getCurrentTokenChunk()\n      return false\n    },\n\n    onCompostionEnd (evt) {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      const cpsData = evt.data\n      let inputIsCustomApmText = false\n      if (this.has.customApmText) {\n        inputIsCustomApmText = this.isCustomApmText(cpsData)\n      }\n      if (inputIsCustomApmText) {\n        this.setSanitizedValueToSection('apm', inputIsCustomApmText)\n      }\n\n      this.$refs.input.value = this.has.customApmText ? this.customDisplayTime : this.displayTime\n\n      nextTick(() => {\n        if (this.bakCurrentPos) {\n          const bakPos = JSON.parse(JSON.stringify(this.bakCurrentPos))\n          if (inputIsCustomApmText) {\n            bakPos.end = (bakPos.start + cpsData.length)\n          }\n          this.debounceSetInputSelection(bakPos)\n          this.bakCurrentPos = null\n        }\n      })\n      return false\n    },\n\n    pasteHandler (evt) {\n      evt.preventDefault()\n      let pastingText = (evt.clipboardData || window.clipboardData).getData('text')\n      if (this.debugMode) {\n        this.debugLog(`Pasting value \"${pastingText}\" from clipboard`)\n      }\n      if (!pastingText || !pastingText.length) { return }\n\n      // Replace custom AM/PM text (if any)\n      if (this.has.customApmText) {\n        pastingText = this.replaceCustomApmText(pastingText)\n      }\n\n      if (this.inputIsEmpty) {\n        this.readStringValues(pastingText)\n      } else {\n        this.kbInputLog = pastingText.substr(-2, 2)\n        this.setKbInput()\n        this.debounceClearKbLog()\n      }\n    },\n\n    arrowHandler (evt) {\n      const direction = { 37: 'L', 38: 'U', 39: 'R', 40: 'D' }[evt.keyCode]\n      if (direction === 'U' || direction === 'D') {\n        if (this.inputIsEmpty) {\n          this.selectFirstValidValue()\n        } else {\n          const currentChunk = this.getCurrentTokenChunk()\n          if (!currentChunk) {\n            this.selectFirstValidValue()\n            return\n          }\n          const tokenType = currentChunk.type\n          this.getClosestValidItemInCol(tokenType, this[tokenType], direction)\n          const newChunkPos = this.getCurrentTokenChunk()\n          this.debounceSetInputSelection(newChunkPos)\n        }\n      } else if (direction === 'R') {\n        this.toLateralToken(false)\n      } else if (direction === 'L') {\n        this.toLateralToken(true)\n      }\n    },\n\n    tabHandler (evt) {      \n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        const currentChunk = this.getCurrentTokenChunk()\n        if (!currentChunk) { return }\n        const firstChunk = this.tokenChunksPos[0]\n        const lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1]\n        if ((evt.shiftKey && currentChunk.token !== firstChunk.token) || (!evt.shiftKey && currentChunk.token !== lastChunk.token)) {\n          evt.preventDefault()\n          this.toLateralToken(evt.shiftKey)\n        }\n      }\n    },\n\n    keyboardInput (newChar, isApm = false) {\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk || (currentChunk.type !== 'apm' && isApm) || (currentChunk.type === 'apm' && !isApm)) { return }\n      this.kbInputLog = `${this.kbInputLog.substr(-1)}${newChar}`\n      this.setKbInput()\n      this.debounceClearKbLog()\n    },\n\n    clearKbInputLog () {\n      window.clearTimeout(this.kbInputTimer)\n      this.kbInputLog = ''\n    },\n\n    debounceClearKbLog () {\n      window.clearTimeout(this.kbInputTimer)\n      this.kbInputTimer = window.setTimeout(() => {\n        this.clearKbInputLog()\n      }, this.opts.manualInputTimeout)\n    },\n\n    setKbInput (value) {\n      value = value || this.kbInputLog\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk || !value || !value.length) { return }\n      const chunkType = currentChunk.type\n      const chunkToken = currentChunk.token\n\n      let validValue\n      if (chunkType === 'apm') {\n        if (this.lowerCasedApm(value).includes('a')) {\n          validValue = 'am'\n        } else if (this.lowerCasedApm(value).includes('p')) {\n          validValue = 'pm'\n        }\n        if (validValue) {\n          validValue = chunkToken === 'A' ? validValue.toUpperCase() : validValue\n        }\n      } else {\n        if (this.isValidValue(chunkToken, value)) {\n          validValue = value\n        } else {\n          const lastInputValue = this.formatValue(chunkToken, value.substr(-1))\n          if (this.isValidValue(chunkToken, lastInputValue)) {\n            validValue = lastInputValue\n          }\n        }\n      }\n\n      if (validValue) {\n        this.setSanitizedValueToSection(chunkType, validValue)\n        const newChunkPos = this.getCurrentTokenChunk()\n        this.debounceSetInputSelection(newChunkPos)      \n      }\n      if (this.debugMode) {\n        if (validValue) {\n          this.debugLog(`Successfully set value \"${validValue}\" from latest input \"${value}\" for the \"${chunkType}\" slot`)\n        } else {\n          this.debugLog(`Value \"${value}\" is invalid in the \"${chunkType}\" slot`)\n        }\n      }\n    },\n\n    // Form Autofill\n    onChange () {\n      if (!this.manualInput || !this.$refs || !this.$refs.input) { return }\n      const autoFillValue = this.$refs.input.value || ''\n      if (autoFillValue && autoFillValue.length) {\n        this.readStringValues(autoFillValue)\n      }\n    },\n\n    getNearestChunkByPos (startPos) {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) { return }\n      let nearest\n      let nearestDelta = -1\n      for (let i = 0; i < this.tokenChunksPos.length; i++) {\n        const chunk = JSON.parse(JSON.stringify(this.tokenChunksPos[i]))\n        if (chunk.start === startPos) {\n          return chunk\n        }\n        const delta = Math.abs(chunk.start - startPos)\n        if (nearestDelta < 0) {\n          nearest = chunk\n          nearestDelta = delta\n        } else {\n          if (nearestDelta <= delta) {\n            return nearest\n          }\n          nearestDelta = delta\n          nearest = chunk\n        }\n      }\n      return nearest\n    },\n\n    selectFirstValidValue () {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) { return }\n      const firstSlotType = this.tokenChunksPos[0].type\n      if (firstSlotType === 'hour') {\n        this.getClosestHourItem()\n      } else {\n        this.getClosestValidItemInCol(firstSlotType, this[firstSlotType])\n      }\n      this.selectFirstSlot()\n    },\n\n    getClosestHourItem (currentValue, direction = 'U') {\n      if (!this.validHoursList || !this.validHoursList.length) {\n        if (this.debugMode) {\n          this.debugLog(`No valid hour values found, please check your \"hour-range\" config\\nhour-range: ${JSON.stringify(this.hourRange)}`)\n        }\n        return\n      }\n      if (!currentValue) {\n        this.setManualHour(this.validHoursList[0])\n        return\n      }\n      const currentIndex = this.validHoursList.findIndex(item => {\n        if (!this.baseOn12Hours) {\n          return item === currentValue\n        } else {\n          const valueKey = `${currentValue}${this.lowerCasedApm(this.apm) === 'pm' ? 'p' : 'a'}` \n          return item === valueKey\n        }\n      })\n      let nextIndex\n      if (currentIndex === -1) {\n        nextIndex = 0\n      } else if (direction === 'D') {\n        nextIndex = currentIndex === 0 ? this.validHoursList.length - 1 : currentIndex - 1\n      } else {\n        nextIndex = (currentIndex + 1) % this.validHoursList.length\n      }\n      const nextItem = this.validHoursList[nextIndex]\n      this.setManualHour(nextItem)\n    },\n\n    getClosestValidItemInCol (column, currentValue, direction = 'U') {\n      if (column === 'hour') {\n        this.getClosestHourItem(currentValue, direction)\n      } else {\n        const nextItem = direction === 'D' ? this.prevItem(column, this[column], true) : this.nextItem(column, this[column], true)\n        if (nextItem) {\n          this.select(column, nextItem.getAttribute('data-key'))\n        }\n      }\n    },\n\n    setSanitizedValueToSection (section, inputValue) {\n      if (!section || !this.getTokenByType(section)) { return }\n      // NOTE: Disabled values are allowed here, followed by an 'error' event, though\n      const sanitizedValue = this.sanitizedValue(this.getTokenByType(section), inputValue)\n      this[section] = sanitizedValue\n    },\n\n    setManualHour (nextItem) {\n      if (this.is12hRange(nextItem)) {\n        const hourT = this.match12hRange(nextItem)\n        const apmValue = hourT[2] === 'a' ? 'AM' : 'PM'\n        this.setSanitizedValueToSection('apm', this.apmType === 'a' ? apmValue.toLowerCase() : apmValue)\n        this.setSanitizedValueToSection('hour', hourT[1])\n      } else {\n        this.setSanitizedValueToSection('hour', nextItem)\n      }\n    },\n\n    debounceSetInputSelection ({start = 0, end = 0 }) {\n      nextTick(() => {\n        this.setInputSelectionRange(start, end)\n      })\n      window.clearTimeout(this.selectionTimer)\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer)\n        // Double-check selection for 12hr format\n        if (this.$refs.input && (this.$refs.input.selectionStart !== start || this.$refs.input.selectionEnd !== end)) {\n          this.setInputSelectionRange(start, end)\n        }\n      }, 30)\n    },\n\n    setInputSelectionRange (start, end) {\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.setSelectionRange(start, end)\n      }\n    },\n\n    getCurrentTokenChunk () {\n      return this.getNearestChunkByPos((this.$refs.input && this.$refs.input.selectionStart) || 0)\n    },\n\n    selectFirstSlot () {\n      const firstChunkPos = this.getNearestChunkByPos(0)\n      this.debounceSetInputSelection(firstChunkPos)\n    },\n\n    toLateralToken (toLeft) {\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk) {\n        this.selectFirstValidValue()\n        return\n      }\n      const currentChunkIndex = this.tokenChunksPos.findIndex(chk => chk.token === currentChunk.token)\n      if ((!toLeft && currentChunkIndex >= this.tokenChunksPos.length - 1) || (toLeft && currentChunkIndex === 0)) {\n        if (this.debugMode) {\n          if (toLeft) {\n            this.debugLog('You\\'re in the leftmost slot already')\n          } else {\n            this.debugLog('You\\'re in the rightmost slot already')\n          }\n        }\n        return\n      }\n      const targetSlotPos = toLeft ? this.tokenChunksPos[currentChunkIndex - 1] : this.tokenChunksPos[currentChunkIndex + 1]\n      this.debounceSetInputSelection(targetSlotPos)\n    },\n\n    isCustomApmText (inputData) {\n      if (!inputData || !inputData.length) { return false }\n      if (this.amText && this.amText === inputData) {\n        return this.apmType === 'A' ? 'AM' : 'am'\n      }\n      if (this.pmText && this.pmText === inputData) {\n        return this.apmType === 'A' ? 'PM' : 'pm'\n      }\n      return false\n    },\n\n    replaceCustomApmText (inputString) {\n      if (this.amText && this.amText.length && inputString.includes(this.amText)) {\n        return inputString.replace(new RegExp(this.amText, 'g'), this.apmType === 'A' ? 'AM' : 'am')\n      } else if (this.pmText && this.pmText.length && inputString.includes(this.pmText)) {\n        return inputString.replace(new RegExp(this.pmText, 'g'), this.apmType === 'A' ? 'PM' : 'pm')\n      }\n      return inputString\n    },\n\n    checkDropDirection () {\n      if (!this.$el) { return }\n      let container\n      if (this.containerId && this.containerId.length) {\n        container = document.getElementById(this.containerId)\n        if (!container && this.debugMode) {\n          this.debugLog(`Container with id \"${this.containerId}\" not found. Fallback to document body.`)\n        }\n      }\n      const el = this.$el\n      let spaceDown\n      if (container && container.offsetHeight) {\n        // Valid container found\n        spaceDown = (container.offsetTop + container.offsetHeight) - (el.offsetTop + el.offsetHeight)\n      } else {\n        // Fallback to document body\n        const docHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)\n        spaceDown = docHeight - (el.offsetTop + el.offsetHeight)\n      }\n      this.forceDropOnTop = this.opts.dropOffsetHeight > spaceDown\n    },\n\n    //\n    // Helpers\n    //\n\n    is12hRange (value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value)\n    },\n\n    match12hRange (value) {\n      return value.match(/^(\\d{1,2})(a|p|A|P)$/)\n    },\n\n    isNumber (value) {\n      return !isNaN(parseFloat(value)) && isFinite(value)\n    },\n\n    isBasicType (type) {\n      return CONFIG.BASIC_TYPES.includes(type)\n    },\n\n    lowerCasedApm (apmValue) {\n      return (apmValue || '').toLowerCase()\n    },\n\n    getTokenRegex (token) {\n      switch (token) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})'\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})'\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})'\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})'\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})'\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})'\n        case 'mm':\n          return '([0-5][0-9]|m{2})'\n        case 'ss':\n          return '([0-5][0-9]|s{2})'\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})'\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})'\n        case 'A':\n          return '(AM|PM|A{1})'\n        case 'a':\n          return '(am|pm|a{1})'\n        default:\n          return ''\n      }\n    },\n\n    isEmptyValue (targetToken, testValue) {\n      return (!testValue || !testValue.length) || (testValue && testValue === targetToken)\n    },\n\n    isValidValue (targetToken, testValue) {\n      if (!targetToken || this.isEmptyValue(targetToken, testValue)) { return false }\n      const tokenRegexStr = this.getTokenRegex(targetToken)\n      if (!tokenRegexStr || !tokenRegexStr.length) { return false }\n      return (new RegExp(`^${tokenRegexStr}$`)).test(testValue)\n    },\n\n    sanitizedValue (targetToken, inputValue) {\n      if (this.isValidValue(targetToken, inputValue)) {\n        return inputValue\n      }\n      return ''\n    },\n\n    getTokenType (token) {\n      return this.inUse.types[this.inUse.tokens.indexOf(token)] || ''\n    },\n\n    getTokenByType (type) {\n      return this[`${type}Type`] || ''\n    },\n\n    isMinuteOrSecond (type) {\n      return ['minute', 'second'].includes(type)\n    },\n\n    // Breaking attribution coercion changes in Vue 3\n    // > https://v3.vuejs.org/guide/migration/attribute-coercion.html#overview\n    booleanAttr (isTrue = false) {\n      return isTrue ? true : null\n    },\n\n    debugLog (logText) {\n      if (!logText || !logText.length) { return }\n      let identifier = ''\n      if (this.id) {\n        identifier += `#${this.id}`\n      }\n      if (this.name) {\n        identifier += `[name=${this.name}]`\n      }\n      if (this.inputClass) {\n        let inputClasses = []\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g)\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass)\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName)\n            }\n          })\n        }\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`\n          }\n        }\n      }\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : '' }`\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText)\n      } else {\n        window.console.log(finalLogText)\n      }\n    }\n  },\n\n  mounted () {\n    window.clearTimeout(this.debounceTimer)\n    window.clearTimeout(this.selectionTimer)\n    window.clearTimeout(this.kbInputTimer)\n    this.renderFormat()\n  },\n\n  beforeUnmount () {\n    window.clearTimeout(this.debounceTimer)\n    window.clearTimeout(this.selectionTimer)\n    window.clearTimeout(this.kbInputTimer)\n  }\n}\n</script>\n\n<template>\n<span class=\"vue__time-picker\" :style=\"inputWidthStyle\">\n  <input type=\"text\" class=\"vue__time-picker-input\" ref=\"input\"\n         :class=\"[inputClass, {'is-empty': inputIsEmpty, 'invalid': hasInvalidInput, 'all-selected': allValueSelected, 'disabled': disabled, 'has-custom-icon': $slots && $slots.icon }]\"\n         :style=\"inputWidthStyle\"\n         :id=\"id\"\n         :name=\"name\"\n         :value=\"inputIsEmpty ? null : customDisplayTime\"\n         :placeholder=\"placeholder ? placeholder : formatString\"\n         :tabindex=\"disabled ? -1 : tabindex\"\n         :disabled=\"booleanAttr(disabled)\"\n         :readonly=\"booleanAttr(!manualInput)\"\n         :autocomplete=\"autocomplete\"\n         @focus=\"onFocus\"\n         @change=\"onChange\"\n         @blur=\"debounceBlur(); blurEvent()\"\n         @mousedown=\"onMouseDown\"\n         @keydown=\"keyDownHandler\"\n         @compositionstart=\"onCompostionStart\"\n         @compositionend=\"onCompostionEnd\"\n         @paste=\"pasteHandler\"\n         @keydown.esc.exact=\"escBlur\" />\n  <div class=\"controls\" v-if=\"showClearBtn || showDropdownBtn\" tabindex=\"-1\">\n    <span v-if=\"!isActive && showClearBtn\" class=\"clear-btn\" tabindex=\"-1\"\n          :class=\"{'has-custom-btn': $slots && $slots.clearButton }\"\n          @click=\"clearTime\">\n      <slot name=\"clearButton\"><span class=\"char\">&times;</span></slot>\n    </span>\n    <span v-if=\"showDropdownBtn\" class=\"dropdown-btn\" tabindex=\"-1\"\n          :class=\"{'has-custom-btn': $slots && $slots.dropdownButton }\"\n          @click=\"setDropdownState(fixedDropdownButton ? !showDropdown : true, true)\"\n          @mousedown=\"keepFocusing\">\n      <slot name=\"dropdownButton\"><span class=\"char\">&dtrif;</span></slot>\n    </span>\n  </div>\n  <div class=\"custom-icon\" v-if=\"$slots && $slots.icon\"><slot name=\"icon\"></slot></div>\n  <div class=\"time-picker-overlay\" v-if=\"showDropdown\" @click=\"toggleActive\" tabindex=\"-1\"></div>\n  <div class=\"dropdown\" v-show=\"showDropdown\" tabindex=\"-1\"\n       :class=\"[dropdownDirClass]\" :style=\"inputWidthStyle\"\n       @mouseup=\"keepFocusing\" @click.stop=\"\">\n    <div class=\"select-list\" :style=\"inputWidthStyle\" tabindex=\"-1\">\n      <!-- Common Keyboard Support: less event listeners -->\n      <template v-if=\"!advancedKeyboard\">\n        <template v-for=\"column in columnsSequence\" :key=\"column\">\n          <ul v-if=\"column === 'hour'\" class=\"hours\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"hourLabelText\"></li>\n            <template v-for=\"(hr, hIndex) in hours\" :key=\"hIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('hour', hr))\"\n                  :class=\"{active: hour === hr}\"\n                  :disabled=\"booleanAttr(isDisabled('hour', hr))\"\n                  :data-key=\"hr\"\n                  v-text=\"hr\"\n                  @click=\"select('hour', hr)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'minute'\" class=\"minutes\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"minuteLabelText\"></li>\n            <template v-for=\"(m, mIndex) in minutes\" :key=\"mIndex\">\n              <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabled('minute', m))\"\n                  :class=\"{active: minute === m}\"\n                  :disabled=\"booleanAttr(isDisabled('minute', m))\"\n                  :data-key=\"m\"\n                  v-text=\"m\"\n                  @click=\"select('minute', m)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'second'\" class=\"seconds\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"secondLabelText\"></li>\n            <template v-for=\"(s, sIndex) in seconds\" :key=\"sIndex\">\n              <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabled('second', s))\"\n                  :class=\"{active: second === s}\"\n                  :disabled=\"booleanAttr(isDisabled('second', s))\"\n                  :data-key=\"s\"\n                  v-text=\"s\"\n                  @click=\"select('second', s)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'apm'\" class=\"apms\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"apmLabelText\"></li>\n            <template v-for=\"(a, aIndex) in apms\" :key=\"aIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('apm', a))\"\n                  :class=\"{active: apm === a}\"\n                  :disabled=\"booleanAttr(isDisabled('apm', a))\"\n                  :data-key=\"a\"\n                  v-text=\"apmDisplayText(a)\"\n                  @click=\"select('apm', a)\"></li>\n            </template>\n          </ul>\n        </template>\n      </template><!-- / Common Keyboard Support -->\n\n      <!--\n        Advanced Keyboard Support\n        Addeds hundreds of additional event lisenters\n      -->\n      <template v-if=\"advancedKeyboard\">\n        <template v-for=\"column in columnsSequence\" :key=\"column\">\n          <ul v-if=\"column === 'hour'\" class=\"hours\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"hourLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(hr, hIndex) in hours\" :key=\"hIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('hour', hr))\"\n                  :class=\"{active: hour === hr}\"\n                  :tabindex=\"isDisabled('hour', hr) ? -1 : tabindex\"\n                  :data-key=\"hr\"\n                  :disabled=\"booleanAttr(isDisabled('hour', hr))\"\n                  v-text=\"hr\"\n                  @click=\"select('hour', hr)\"\n                  @keydown.space.prevent=\"select('hour', hr)\"\n                  @keydown.enter.prevent=\"select('hour', hr)\"\n                  @keydown.up.prevent=\"prevItem('hour', hr)\"\n                  @keydown.down.prevent=\"nextItem('hour', hr)\"\n                  @keydown.left.prevent=\"toLeftColumn('hour')\"\n                  @keydown.right.prevent=\"toRightColumn('hour')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'minute'\" class=\"minutes\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"minuteLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(m, mIndex) in minutes\" :key=\"mIndex\">\n              <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabled('minute', m))\"\n                  :class=\"{active: minute === m}\"\n                  :tabindex=\"isDisabled('minute', m) ? -1 : tabindex\"\n                  :data-key=\"m\"\n                  :disabled=\"booleanAttr(isDisabled('minute', m))\"\n                  v-text=\"m\"\n                  @click=\"select('minute', m)\"\n                  @keydown.space.prevent=\"select('minute', m)\"\n                  @keydown.enter.prevent=\"select('minute', m)\"\n                  @keydown.up.prevent=\"prevItem('minute', m)\"\n                  @keydown.down.prevent=\"nextItem('minute', m)\"\n                  @keydown.left.prevent=\"toLeftColumn('minute')\"\n                  @keydown.right.prevent=\"toRightColumn('minute')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'second'\" class=\"seconds\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"secondLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(s, sIndex) in seconds\" :key=\"sIndex\">\n              <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabled('second', s))\"\n                  :class=\"{active: second === s}\"\n                  :tabindex=\"isDisabled('second', s) ? -1 : tabindex\"\n                  :data-key=\"s\"\n                  :disabled=\"booleanAttr(isDisabled('second', s))\"\n                  v-text=\"s\"\n                  @click=\"select('second', s)\"\n                  @keydown.space.prevent=\"select('second', s)\"\n                  @keydown.enter.prevent=\"select('second', s)\"\n                  @keydown.up.prevent=\"prevItem('second', s)\"\n                  @keydown.down.prevent=\"nextItem('second', s)\"\n                  @keydown.left.prevent=\"toLeftColumn('second')\"\n                  @keydown.right.prevent=\"toRightColumn('second')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'apm'\" class=\"apms\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"apmLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(a, aIndex) in apms\" :key=\"aIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('apm', a))\"\n                  :class=\"{active: apm === a}\"\n                  :tabindex=\"isDisabled('apm', a) ? -1 : tabindex\"\n                  :data-key=\"a\"\n                  :disabled=\"booleanAttr(isDisabled('apm', a))\"\n                  v-text=\"apmDisplayText(a)\"\n                  @click=\"select('apm', a)\"\n                  @keydown.space.prevent=\"select('apm', a)\"\n                  @keydown.enter.prevent=\"select('apm', a)\"\n                  @keydown.up.prevent=\"prevItem('apm', a)\"\n                  @keydown.down.prevent=\"nextItem('apm', a)\"\n                  @keydown.left.prevent=\"toLeftColumn('apm')\"\n                  @keydown.right.prevent=\"toRightColumn('apm')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n        </template>\n      </template><!-- / Advanced Keyboard Support -->\n    </div>\n  </div>\n</span>\n</template>\n\n<style lang=\"css\">\n.vue__time-picker {\n  display: inline-block;\n  position: relative;\n  font-size: 1em;\n  width: 10em;\n  font-family: sans-serif;\n  vertical-align: middle;\n}\n\n.vue__time-picker * {\n  box-sizing: border-box;\n}\n\n.vue__time-picker input.vue__time-picker-input {\n  border: 1px solid #d2d2d2;\n  width: 10em;\n  height: 2.2em;\n  padding: 0.3em 0.5em;\n  font-size: 1em;\n}\n\n.vue__time-picker input.has-custom-icon {\n  padding-left: 1.8em;\n}\n\n.vue__time-picker input.vue__time-picker-input.invalid:not(.skip-error-style) {\n  border-color: #cc0033;\n  outline-color: #cc0033;\n}\n\n.vue__time-picker input.vue__time-picker-input:disabled,\n.vue__time-picker input.vue__time-picker-input.disabled {\n  color: #d2d2d2;\n}\n\n.vue__time-picker .controls {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  z-index: 3;\n\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-end;\n  align-items: stretch;\n\n  /* Prevent browser focusing on the controls layer */\n  pointer-events: none;\n}\n\n.vue__time-picker .controls > * {\n  cursor: pointer;\n  \n  width: auto;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n\n  padding: 0 0.35em;\n\n  color: #d2d2d2;\n  line-height: 100%;\n  font-style: normal;\n\n  /* Resume pointer-events on children components */\n  pointer-events: initial;\n\n  transition: color .2s, opacity .2s;\n}\n\n.vue__time-picker .controls > *:hover {\n  color: #797979;\n}\n\n.vue__time-picker .controls > *:focus,\n.vue__time-picker .controls > *:active {\n  outline: 0;\n}\n\n.vue__time-picker .controls .char {\n  font-size: 1.1em;\n  line-height: 100%;\n\n  /* Vertical align fixes for webkit browsers only */\n  -webkit-margin-before: -0.15em;\n}\n\n.vue__time-picker .custom-icon {\n  z-index: 2;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 1.8em;\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n\n  /* pass down mouse events to the <input> underneath */\n  pointer-events: none;\n}\n\n.vue__time-picker .custom-icon img,\n.vue__time-picker .custom-icon svg,\n.vue__time-picker .controls img,\n.vue__time-picker .controls svg {\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  border: 0;\n  outline: 0;\n  max-width: 1em;\n  height: auto;\n}\n\n.vue__time-picker .time-picker-overlay {\n  z-index: 4;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.vue__time-picker .dropdown {\n  position: absolute;\n  z-index: 5;\n  top: calc(2.2em + 2px);\n  left: 0;\n  background: #fff;\n  box-shadow: 0 1px 6px rgba(0,0,0,0.15);\n  width: 10em;\n  height: 10em;\n  font-weight: normal;\n}\n\n.vue__time-picker .dropdown.drop-up {\n  top: auto;\n  bottom: calc(2.2em + 1px);\n}\n\n.vue__time-picker .dropdown .select-list {\n  width: 10em;\n  height: 10em;\n  overflow: hidden;\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: space-between;\n}\n\n.vue__time-picker .dropdown .select-list:focus,\n.vue__time-picker .dropdown .select-list:active {\n  outline: 0;\n}\n\n.vue__time-picker .dropdown ul {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  outline: 0;\n\n  flex: 1 1 0.00001px;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.vue__time-picker .dropdown ul.minutes,\n.vue__time-picker .dropdown ul.seconds,\n.vue__time-picker .dropdown ul.apms{\n  border-left: 1px solid #fff;\n}\n\n.vue__time-picker .dropdown ul li {\n  list-style: none;\n  text-align: center;\n  padding: 0.3em 0;\n  color: #161616;\n}\n\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):hover,\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):focus {\n  background: rgba(0,0,0,.08);\n  color: #161616;\n  cursor: pointer;\n}\n\n.vue__time-picker .dropdown ul li:not([disabled]).active,\n.vue__time-picker .dropdown ul li:not([disabled]).active:hover,\n.vue__time-picker .dropdown ul li:not([disabled]).active:focus {\n  background: #41B883;\n  color: #fff;\n}\n\n.vue__time-picker .dropdown ul li[disabled],\n.vue__time-picker .dropdown ul li[disabled]:hover {\n  background: transparent;\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.vue__time-picker .dropdown .hint {\n  color: #a5a5a5;\n  cursor: default;\n  font-size: 0.8em;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}