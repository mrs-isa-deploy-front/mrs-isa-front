{"ast":null,"code":"import $ from 'jquery';\nexport default {\n  name: \"modalWithTextArea\",\n  props: ['buttonText', 'buttonColor', \"header\", \"index\"],\n  created: function () {\n    this.modalId = this.index.replace(\" \", \"\");\n    this.modalIdHash = \"#\" + this.modalId;\n  },\n  methods: {\n    openModel() {\n      //document.getElementById(this.modalIdHash).modal('show');\n      //var myModal = new bootstrap.Modal(document.getElementById(this.modalId), options);\n      //myModal.show(true);\n      //$('#' + this.modalId).modal('show');\n      $('#' + this.modalId).modal('show');\n      /*\r\n      const modal = document.getElementById(this.index);\r\n        // change state like in hidden modal\r\n      modal.classList.add('show');\r\n      modal.setAttribute('aria-hidden', 'false');\r\n      modal.setAttribute('style', 'display: block');\r\n        // get modal backdrop\r\n      const modalBackdrops = document.getElementsByClassName('modal fade');\r\n        // remove opened modal backdrop\r\n      document.body.removeChild(modalBackdrops[0]);\r\n      */\n    },\n\n    sendValue() {\n      if (this.text == \"\") {\n        document.getElementById(\"emptyErrorModalWithTextArea\").style.color = \"red\";\n        document.getElementById(\"emptyErrorModalWithTextArea\").style.visibility = \"visible\";\n        return;\n      } //$('#'+this.modalId).modal('hide');\n\n\n      this.$emit('input-text-rating', this.text, this.rating);\n      const modal = document.getElementById(this.index); // change state like in hidden modal\n\n      modal.classList.remove('show');\n      modal.setAttribute('aria-hidden', 'true');\n      modal.setAttribute('style', 'display: none'); // get modal backdrop\n\n      const modalBackdrops = document.getElementsByClassName('modal-backdrop'); // remove opened modal backdrop\n\n      document.body.removeChild(modalBackdrops[0]);\n      document.body.style.overflow = 'auto';\n      this.$emit('input-text', this.text);\n    }\n\n  },\n\n  data() {\n    return {\n      text: \"\",\n      modalId: \"\",\n      modalIdHash: \"\"\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAkCA,OAAOA,CAAP,MAAc,QAAd;AACA,eAAe;AACbC,MAAI,EAAE,mBADO;AAEbC,OAAK,EAAE,CAAC,YAAD,EAAe,aAAf,EAA8B,QAA9B,EAAwC,OAAxC,CAFM;AAGbC,SAAO,EACH,YAAY;AACV,SAAKC,OAAL,GAAc,KAAKC,KAAL,CAAWC,OAAX,CAAmB,GAAnB,EAAwB,EAAxB,CAAd;AACA,SAAKC,WAAL,GAAmB,MAAI,KAAKH,OAA5B;AACF,GAPS;AASbI,SAAM,EAAI;AACRC,aAAS,GAAE;AACT;AACA;AACA;AACA;AACAT,OAAC,CAAC,MAAM,KAAKI,OAAZ,CAAD,CAAsBM,KAAtB,CAA4B,MAA5B;AACA;;;;;;;;;;;AAcD,KArBO;;AAsBRC,aAAS,GAAE;AACT,UAAI,KAAKC,IAAL,IAAa,EAAjB,EAAoB;AAClBC,gBAAQ,CAACC,cAAT,CAAwB,6BAAxB,EAAuDC,KAAvD,CAA6DC,KAA7D,GAAqE,KAArE;AACAH,gBAAQ,CAACC,cAAT,CAAwB,6BAAxB,EAAuDC,KAAvD,CAA6DE,UAA7D,GAA0E,SAA1E;AACA;AACF,OALS,CAOT;;;AACA,WAAKC,KAAL,CAAW,mBAAX,EAAgC,KAAKN,IAArC,EAA2C,KAAKO,MAAhD;AAEA,YAAMT,KAAI,GAAIG,QAAQ,CAACC,cAAT,CAAwB,KAAKT,KAA7B,CAAd,CAVS,CAYT;;AACAK,WAAK,CAACU,SAAN,CAAgBC,MAAhB,CAAuB,MAAvB;AACAX,WAAK,CAACY,YAAN,CAAmB,aAAnB,EAAkC,MAAlC;AACAZ,WAAK,CAACY,YAAN,CAAmB,OAAnB,EAA4B,eAA5B,EAfS,CAiBT;;AACA,YAAMC,cAAa,GAAIV,QAAQ,CAACW,sBAAT,CAAgC,gBAAhC,CAAvB,CAlBS,CAoBT;;AACAX,cAAQ,CAACY,IAAT,CAAcC,WAAd,CAA0BH,cAAc,CAAC,CAAD,CAAxC;AACAV,cAAQ,CAACY,IAAT,CAAcV,KAAd,CAAoBY,QAApB,GAA+B,MAA/B;AACA,WAAKT,KAAL,CAAW,YAAX,EAAyB,KAAKN,IAA9B;AAEF;;AA/CQ,GATG;;AA0DbgB,MAAI,GAAG;AACL,WAAO;AACLhB,UAAI,EAAE,EADD;AAELR,aAAO,EAAE,EAFJ;AAGLG,iBAAW,EAAE;AAHR,KAAP;AAKF;;AAhEa,CAAf","names":["$","name","props","created","modalId","index","replace","modalIdHash","methods","openModel","modal","sendValue","text","document","getElementById","style","color","visibility","$emit","rating","classList","remove","setAttribute","modalBackdrops","getElementsByClassName","body","removeChild","overflow","data"],"sourceRoot":"","sources":["D:\\fakultet\\6.semestar\\MRS\\Projekat\\projekat-login\\projekat\\mrs-isa-front\\src\\components\\modalWithTextArea.vue"],"sourcesContent":["<template>\r\n  <div>\r\n\r\n    <button type=\"button\"  :style=\"buttonColor\" class=\"btn btn-secondary\" data-bs-toggle=\"modal\" :data-bs-target=\"modalIdHash\">\r\n      {{buttonText}}\r\n    </button>\r\n\r\n    <!-- Modal -->\r\n    <div class=\"modal fade\" style=\"overflow-y: auto\" :id=\"modalId\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"false\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"exampleModalLabel\">{{header}}</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n              Razlog za brisanje naloga:\r\n              <textarea class=\"my-4\" rows=\"5\" cols=\"50\" name=\"text\" v-model=\"text\"></textarea>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Odustani</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click.prevent=\"sendValue\">Po≈°alji</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport $ from 'jquery'\r\nexport default {\r\n  name: \"modalWithTextArea\",\r\n  props: ['buttonText', 'buttonColor', \"header\", \"index\"],\r\n  created:\r\n      function () {\r\n        this.modalId= this.index.replace(\" \", \"\");\r\n        this.modalIdHash = \"#\"+this.modalId;\r\n      }\r\n  ,\r\n  methods : {\r\n    openModel(){\r\n      //document.getElementById(this.modalIdHash).modal('show');\r\n      //var myModal = new bootstrap.Modal(document.getElementById(this.modalId), options);\r\n      //myModal.show(true);\r\n      //$('#' + this.modalId).modal('show');\r\n      $('#' + this.modalId).modal('show');\r\n      /*\r\n      const modal = document.getElementById(this.index);\r\n\r\n      // change state like in hidden modal\r\n      modal.classList.add('show');\r\n      modal.setAttribute('aria-hidden', 'false');\r\n      modal.setAttribute('style', 'display: block');\r\n\r\n      // get modal backdrop\r\n      const modalBackdrops = document.getElementsByClassName('modal fade');\r\n\r\n      // remove opened modal backdrop\r\n      document.body.removeChild(modalBackdrops[0]);\r\n      */\r\n    },\r\n    sendValue(){\r\n      if (this.text == \"\"){\r\n        document.getElementById(\"emptyErrorModalWithTextArea\").style.color = \"red\";\r\n        document.getElementById(\"emptyErrorModalWithTextArea\").style.visibility = \"visible\";\r\n        return;\r\n      }\r\n\r\n      //$('#'+this.modalId).modal('hide');\r\n      this.$emit('input-text-rating', this.text, this.rating);\r\n\r\n      const modal = document.getElementById(this.index);\r\n\r\n      // change state like in hidden modal\r\n      modal.classList.remove('show');\r\n      modal.setAttribute('aria-hidden', 'true');\r\n      modal.setAttribute('style', 'display: none');\r\n\r\n      // get modal backdrop\r\n      const modalBackdrops = document.getElementsByClassName('modal-backdrop');\r\n\r\n      // remove opened modal backdrop\r\n      document.body.removeChild(modalBackdrops[0]);\r\n      document.body.style.overflow = 'auto';\r\n      this.$emit('input-text', this.text);\r\n\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      text: \"\",\r\n      modalId: \"\",\r\n      modalIdHash: \"\"\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}