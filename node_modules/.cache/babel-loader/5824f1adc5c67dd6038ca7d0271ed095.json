{"ast":null,"code":"import { reactive } from \"@vue/reactivity\";\nimport useValidators from '@/validations/validators';\nconst errors = reactive({});\nexport default function useFormValidation() {\n  const {\n    isEmpty,\n    minLength,\n    isEmail,\n    isNum\n  } = useValidators();\n\n  const validateNameField = (fieldName, fieldValue) => {\n    errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : minLength(fieldName, fieldValue, 4);\n  };\n\n  const validateSurnameField = (fieldSurname, fieldValue) => {\n    errors[fieldSurname] = !fieldValue ? isEmpty(fieldSurname, fieldValue) : minLength(fieldSurname, fieldValue, 4);\n  };\n\n  const validateAddressField = (fieldAddress, fieldValue) => {\n    errors[fieldAddress] = !fieldValue ? isEmpty(fieldAddress, fieldValue) : minLength(fieldAddress, fieldValue, 4);\n  };\n\n  const validateCityField = (fieldCity, fieldValue) => {\n    errors[fieldCity] = !fieldValue ? isEmpty(fieldCity, fieldValue) : minLength(fieldCity, fieldValue, 4);\n  };\n\n  const validateCountryField = (fieldCountry, fieldValue) => {\n    errors[fieldCountry] = !fieldValue ? isEmpty(fieldCountry, fieldValue) : minLength(fieldCountry, fieldValue, 4);\n  };\n\n  const validateEmailField = (fieldName, fieldValue) => {\n    errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : isEmail(fieldName, fieldValue);\n  };\n\n  const validatePhoneField = (fieldName, fieldValue) => {\n    errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : isNum(fieldName, fieldValue);\n  };\n\n  const validatePasswordField = (fieldName, fieldValue) => {\n    errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : minLength(fieldName, fieldValue, 8);\n  };\n\n  const validatePasswordAgainField = (fieldName, fieldValue) => {\n    errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : minLength(fieldName, fieldValue, 8);\n  };\n  /* const validatePasswordConfirm = (password, passwordAgain) =>{\r\n       errors[passwordAgain] = isEqual(password,passwordAgain):minLength(fieldName, fieldValue, 8);\r\n   }*/\n\n\n  return {\n    errors,\n    validatePasswordAgainField,\n    validateAddressField,\n    validateCityField,\n    validateCountryField,\n    validateNameField,\n    validateSurnameField,\n    validateEmailField,\n    validatePhoneField,\n    validatePasswordField\n  };\n}","map":{"version":3,"sources":["D:/fakultet/6.semestar/MRS/Projekat/projekat-login/projekat/mrs-isa-front/src/validations/useFormValidation.js"],"names":["reactive","useValidators","errors","useFormValidation","isEmpty","minLength","isEmail","isNum","validateNameField","fieldName","fieldValue","validateSurnameField","fieldSurname","validateAddressField","fieldAddress","validateCityField","fieldCity","validateCountryField","fieldCountry","validateEmailField","validatePhoneField","validatePasswordField","validatePasswordAgainField"],"mappings":"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","sourcesContent":["import { reactive } from \"@vue/reactivity\";\r\nimport useValidators from '@/validations/validators'\r\n\r\n\r\nconst errors = reactive({});\r\n\r\n\r\nexport default function useFormValidation() {\r\n\r\n\r\n    const { isEmpty, minLength, isEmail, isNum } = useValidators();\r\n\r\n    const validateNameField = (fieldName, fieldValue) => {\r\n        errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : minLength(fieldName, fieldValue, 4)\r\n    }\r\n\r\n    const validateSurnameField = (fieldSurname, fieldValue) => {\r\n        errors[fieldSurname] = !fieldValue ? isEmpty(fieldSurname, fieldValue) : minLength(fieldSurname, fieldValue, 4)\r\n    }\r\n\r\n    const validateAddressField = (fieldAddress, fieldValue) => {\r\n        errors[fieldAddress] = !fieldValue ? isEmpty(fieldAddress, fieldValue) : minLength(fieldAddress, fieldValue, 4)\r\n    }\r\n\r\n    const validateCityField = (fieldCity, fieldValue) => {\r\n        errors[fieldCity] = !fieldValue ? isEmpty(fieldCity, fieldValue) : minLength(fieldCity, fieldValue, 4)\r\n    }\r\n\r\n    const validateCountryField = (fieldCountry, fieldValue) => {\r\n        errors[fieldCountry] = !fieldValue ? isEmpty(fieldCountry, fieldValue) : minLength(fieldCountry, fieldValue, 4)\r\n    }\r\n\r\n    const validateEmailField = (fieldName, fieldValue) => {\r\n        errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : isEmail(fieldName, fieldValue)\r\n    }\r\n\r\n    const validatePhoneField = (fieldName, fieldValue) => {\r\n        errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : isNum(fieldName, fieldValue)\r\n    }\r\n\r\n    const validatePasswordField = (fieldName, fieldValue) => {\r\n        errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : minLength(fieldName, fieldValue, 8)\r\n    }\r\n\r\n    const validatePasswordAgainField = (fieldName, fieldValue) => {\r\n        errors[fieldName] = !fieldValue ? isEmpty(fieldName, fieldValue) : minLength(fieldName, fieldValue, 8)\r\n    }\r\n   /* const validatePasswordConfirm = (password, passwordAgain) =>{\r\n        errors[passwordAgain] = isEqual(password,passwordAgain):minLength(fieldName, fieldValue, 8);\r\n    }*/\r\n\r\n    return { errors, validatePasswordAgainField, validateAddressField, validateCityField, validateCountryField, validateNameField, validateSurnameField, validateEmailField, validatePhoneField, validatePasswordField }\r\n}"]},"metadata":{},"sourceType":"module"}